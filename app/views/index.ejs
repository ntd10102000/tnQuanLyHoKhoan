<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="utf-8">
	<title>3D</title>

	<!-- Include the CesiumJS JavaScript and CSS files -->
	<script src="https://cesium.com/downloads/cesiumjs/releases/1.101/Build/Cesium/Cesium.js"></script>
	<link href="https://cesium.com/downloads/cesiumjs/releases/1.101/Build/Cesium/Widgets/widgets.css" rel="stylesheet">
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet"
		integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">

</head>
<style>
	html,
	body,
	#cesiumContainer {
		width: 100%;
		height: 100%;
		margin: 0;
		padding: 0;
		overflow: hidden;
	}

	#toolbar {
		position: absolute;
		top: 20px;
		left: 20px;
		background: rgba(42, 42, 42, 0.8);
		/* padding: 8px; */
		border-radius: 4px;
	}

	#toolbar .header {
		font-weight: bold;
		padding-top: 5px;
		padding-bottom: 5px;
	}

	#toolbar td {
		color: aliceblue;
	}

	#chuGiaiLopHoKhoan {
		position: absolute;
		bottom: 35px;
		right: 20px;
		background: rgba(42, 42, 42, 0.8);
		/* padding: 8px; */
		border-radius: 4px;
	}

	.custom-infobox {
		display: none;
		position: absolute;
		right: 24px;
		top: 64px;
		border-radius: 4px;
		padding: 8px;
		background: #2e2f30;
		/* pointer-events: none; */
	}

	.custom-infobox.open {
		display: block;
	}

	.gallery,
	h1,
	p,
	hr {
		width: 400px;
		display: block;
		margin: 15px auto 15px auto;
		justify-content: center;
	}

	.hidden {
		display: none;
	}

	.nosel {
		-webkit-touch-callout: none;
		-webkit-user-select: none;
		-khtml-user-select: none;
		-moz-user-select: none;
		-ms-user-select: none;
		user-select: none;
	}


	.img-enlarged__cont {
		width: 100%;
		height: 0px;
		opacity: 0;
		font-family: Helvetica, sans-serif;
		cursor: zoom-out;
		background: rgba(0, 0, 0, 0.5);
		position: fixed;
		top: 0;
		left: 0;
		z-index: 998;

		transition: opacity 0.3s ease-in-out, height 0.3s ease-in-out;
	}

	.img-enlarged__cont.open {
		height: 100%;
		opacity: 1;

		transition: opacity 0.3s ease-in-out, height 0.3s ease-in-out;
	}

	.img-enlarged {
		max-width: 100%;
		max-height: 100%;
		border: 5px solid #eee;
		display: block;
		margin: auto !important;

		position: relative;
		top: 0;
		bottom: 0;
	}

	.img-enlarged__nav.next::after {
		content: ">";
		font-size: 50px;
		font-family: monospace;
		color: #fff;
		position: absolute;
		right: 40%;
		top: 49%;
	}

	.img-enlarged__nav.prev::after {
		content: "<";
		font-size: 50px;
		font-family: monospace;
		color: #fff;
		position: absolute;
		left: 40%;
		top: 49%;
	}


	.gallery img {
		cursor: zoom-in;
	}


	.img-enlarged__nav {
		background: rgba(0, 0, 0, 0.2);
		cursor: pointer;
		z-index: 999;
		text-align: center;
		height: 100%;
		width: 10%;
		vertical-align: middle;
		transition: 0.3s width, 0.2s background;
	}

	.img-enlarged__nav:hover {
		background: rgba(0, 0, 0, 0.8);
		width: 11%;
		transition: 0.3s width, 0.2s background;
	}

	.img-enlarged__nav:active {
		width: 12%;
		transition: 0.1s width;
	}

	.img-enlarged__nav span {
		font-size: 25px;
		color: #fff;
		height: 20px;
		display: inline-block;
	}

	.img-enlarged__nav.prev {
		position: absolute;
		top: 0;
		left: 0;
	}

	.img-enlarged__nav.next {
		position: absolute;
		top: 0;
		right: 0;
	}


	.img-enlarged__counter {
		background: rgba(0, 0, 0, 0.5);
		color: #fff;
		font-family: monospace;
		width: 50px;
		text-align: center;
		font-size: 15px;
		padding: 7px 0 7px 0;
		margin: auto !important;
		display: block;

		position: absolute;
		left: 49%;
		bottom: 5%;
	}
</style>

<body>
	<div id="cesiumContainer"></div>
	<div id="toolbar">
		<div class="accordion" id="chuGiaiLopBanDo" style="--bs-accordion-bg: rgba(42, 42, 42, 0.1)">
			<div class="accordion-item">
				<h2 class="accordion-header" id="headingThreeChuGiaiLopBanDo">
					<button class="accordion-button" type="button" data-bs-toggle="collapse"
						data-bs-target="#collChuGiaiLopBanDo" aria-expanded="false" aria-controls="collChuGiaiLopBanDo"
						style="color: #fff;background-color:  rgba(42, 42, 42, 0.1);">
						Lớp bản đồ
					</button>
				</h2>
				<div id="collChuGiaiLopBanDo" class="accordion-collapse collapse show"
					aria-labelledby="headingThreeChuGiaiLopBanDo" data-bs-parent="#chuGiaiLopBanDo">
					<div class="accordion-body">
						<div>
							<h3 class="text-gray-800 fw-bold" style="font-size: 16px;
							margin: 0;
							color: #fff;margin-bottom: 4px;">Hành chính</h3>
							<div class="d-flex flex-row m-2 align-items-center">
								<input class="form-check-input" style="margin: 0 !important;" type="checkbox"
									onclick="btQuanHuyenHN(this)">
								<div style="
										  height: 20px;
										  width: 20px;
										  border: 1px solid #ffc700;
										  background-color: #ffc70020;
										margin-left: 8px;
										margin-right: 8px;
										"></div>
								<span class="form-check-label" style="color: #fff;font-size: 14px;">Quận huyện Hà
									Nội</span>
							</div>
						</div>
						<div>
							<h3 class="text-gray-800 fw-bold" style="font-size: 16px;
							margin: 0;
							color: #fff;margin-bottom: 4px;">Công trình mặt</h3>
							<div class="d-flex flex-row m-2 align-items-center">
								<input class="form-check-input" style="margin: 0 !important;" type="checkbox"
									onclick="btCongTrinhCoTangHam(this)">
								<div style="
										  height: 20px;
										  width: 20px;
										  border: 1px solid #6e7e8e;
										  background-color: #6e7e8e;
										margin-left: 8px;
										margin-right: 8px;
										"></div>
								<span class="form-check-label" style="color: #fff;font-size: 14px;">Nhà cao tầng</span>
							</div>
						</div>
						<div>
							<h3 class="text-gray-800 fw-bold" style="font-size: 16px;
							margin: 0;
							color: #fff;margin-bottom: 4px;">Công trình ngầm</h3>
							<div class="d-flex flex-row m-2 align-items-center">
								<div style="margin-left: 16px;">
									<p style="font-size: 16px;
									margin: 0;
									color: #fff;margin-bottom: 4px;">Công trình giao thông ngầm</p>
								</div>
							</div>
							<div class="d-flex flex-row m-2 align-items-center">
								<div style="margin-left: 16px;">
									<p style="font-size: 16px;
									margin: 0;
									color: #fff;margin-bottom: 4px;">Công trình hạ tầng kỹ thuật ngầm</h3>
									<div class="d-flex flex-row m-2 align-items-center">
										<input class="form-check-input" style="margin: 0 !important;" type="checkbox"
											onclick="btDuongOngCapNuoc(this)">
										<div style="
											height: 2px;
											width: 20px;
											background-color: #0095e8;
											margin-left: 8px;
											transform: rotate(120deg);
										 "></div>
										<span class="form-check-label" style="color: #fff;font-size: 14px;">Đường ống
											cấp
											nước</span>
									</div>
									<div class="d-flex flex-row m-2 align-items-center">
										<input class="form-check-input" style="margin: 0 !important;" type="checkbox"
											onclick="btDuongOngThoatNuoc(this)">
										<div style="
											height: 2px;
											width: 20px;
											background-color: #f1416c;
											margin-left: 8px;
											transform: rotate(120deg);
										 "></div>
										<span class="form-check-label" style="color: #fff;font-size: 14px;">Đường ống
											thoát
											nước</span>
									</div>
								</div>
							</div>
							<div class="d-flex flex-row m-2 align-items-center">
								<div style="margin-left: 16px;">
									<p style="font-size: 16px;
									margin: 0;
									color: #fff;margin-bottom: 4px;">Công trình công cộng ngầm</h3>
								</div>
							</div>
							<div class="d-flex flex-row m-2 align-items-center">
								<div style="margin-left: 16px;">
									<p style="font-size: 16px;
									margin: 0;
									color: #fff;margin-bottom: 4px;">Phần ngầm công trình xây dựng</h3>
									<div class="d-flex flex-row m-2 align-items-center">
										<input class="form-check-input" style="margin: 0 !important;" type="checkbox"
											onclick="btTangHam(this)">
										<div style="
												  height: 20px;
												  width: 20px;
												  border: 1px solid pink;
												  background-color: pink;
												margin-left: 8px;
												margin-right: 8px;
												"></div>
										<span class="form-check-label" style="color: #fff;font-size: 14px;">Tầng hầm các
											công trình xây dựng</span>
									</div>
									<div class="d-flex flex-row m-2 align-items-center">
										<input class="form-check-input" style="margin: 0 !important;" type="checkbox"
											onclick="btCocKhoanNhoi(this)">
										<div style="
												  height: 20px;
												  width: 20px;
												  border: 1px solid #702af7;
												  background-color: #702af7;
												margin-left: 8px;
												margin-right: 8px;
												border-radius: 4px;
												"></div>
										<span class="form-check-label" style="color: #fff;font-size: 14px;">Cọc khoan
											nhồi</span>
									</div>
								</div>
							</div>
						</div>
						<div>
							<h3 class="text-gray-800 fw-bold" style="font-size: 16px;
							margin: 0;
							color: #fff;margin-bottom: 4px;">Cấu trúc nền</h3>
							<div class="d-flex flex-row m-2 align-items-center">
								<input class="form-check-input" style="margin: 0 !important;" type="checkbox"
									onclick="btHoKhoan(this)" checked>
								<div style="
										  height: 20px;
										  width: 20px;
										  border: 1px solid green;
										  background-color: green;
										margin-left: 8px;
										margin-right: 8px;
										border-radius: 4px;
										"></div>
								<span class="form-check-label" style="color: #fff;font-size: 14px;">Hố khoan</span>
							</div>
							<div class="d-flex flex-row m-2 align-items-center">
								<input class="form-check-input" style="margin: 0 !important;" type="checkbox"
									onclick="btMatCat(this)" checked>
								<div style="
										  height: 20px;
										  width: 20px;
										  border: 1px solid #B8E986;
										  background-color: #B8E986;
										margin-left: 8px;
										margin-right: 8px;
										border-radius: 4px;
										"></div>
								<span class="form-check-label" style="color: #fff;font-size: 14px;">Mặt cắt</span>
							</div>
						</div>
						<table style="margin-top: 4px;">
							<tbody>
								<tr>
									<td style="font-weight: 700;">Độ mờ bản đồ nền</td>
									<td>
										<input type="range" min="0.0" max="1.0" step="0.1"
											data-bind="value: alpha, valueUpdate: 'input'" style="margin-top: 12px;
											width: 100px;
											margin-left: 20px;">
									</td>
								</tr>
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>
	<a href="./2D" class="d-flex justify-content-center"
		style="padding: 3px;background-color: burlywood;border-radius: 4px;position: absolute;right: 84px;top: 7px;text-decoration: none;color: aliceblue;font-weight: 600;width: 32px;border: 1px solid #303336;">2D</a>
	<div id="chuGiaiLopHoKhoan" class="d-flex flex-column justify-content-center align-items-center">
		<div class="accordion" id="accordionExample" style="--bs-accordion-bg: rgba(42, 42, 42, 0.1)">
			<div class="accordion-item">
				<h2 class="accordion-header" id="headingThree">
					<button class="accordion-button" type="button" data-bs-toggle="collapse"
						data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree"
						style="color: #fff;background-color:  rgba(42, 42, 42, 0.1);">
						Lớp cắt hố khoan
					</button>
				</h2>
				<div id="collapseThree" class="accordion-collapse collapse  show" aria-labelledby="headingThree"
					data-bs-parent="#accordionExample">
					<div class="accordion-body">
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #86d3bb;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								1
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Bùn
								đáy
								hồ</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #72c4a9;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								2
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Cát lòng
								sông, bãi bồi di động ven sông</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #58b596;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								3
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Bùn
								Sét pha - cát pha bãi bồi thấp, trạng thái dẻo mềm - dẻo cứng</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #44aa89;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								4
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Sét -
								sét pha xen kẹp cát pha màu nâu gụ</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #52b092;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								5
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Sét, sét
								pha màu nâu vàng, trạng thái dẻo cứng, dẻo mềm</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #9cb075;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								6
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Sét pha
								màu nâu xám, trạng thái dẻo chảy lẫn ít hữu cơ</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #6d863d;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								7
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Sét pha
								xen kẹp cát pha màu nâu xám</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #627835;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								8
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Cát hạt
								nhỏ, hạt mịn, hạt bụi màu xám xanh, trạng thái chặt vừa</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #5b6f30;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								9
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Sét pha
								màu nâu xám, dẻo mềm, có chỗ xen kẹp cát pha, cát</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #53672b;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								10
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Sét màu
								xám xanh, trạng thái dẻo mềm - dẻo cứng</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #c98b5d;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								11
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Bùn sét
								màu xám đen lẫn hữu cơ</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #ea8c40;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								12
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Sét, sét
								pha màu nâu vàng, xám trắng, loang lổ, có lẫn kết von, trạng thái nửa cứng, dẻo cứng</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #c87330;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								13
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Sét pha
								màu xám đen lẫn hữu cơ, trạng thái dẻo chảy, chảy</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #a7551a;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								14
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Cát pha
								xen kẹp sét pha, màu xám vàng, trạng thái dẻo</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #a8612e;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								15
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Cát hạt
								nhỏ màu nâu vàng</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #959297;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								16
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Cát hạt
								trung lẫn sạn, sỏi màu xám vàng, xám trắng</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #4d7cb5;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								17
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Bùn
								đáy
								hồ</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #3a618f;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								18
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Cuội sỏi
								lẫn cát sét màu xám, xám vàng</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #284569;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								19
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Cuội sỏi
								lẫn cát, cát pha, sét màu xám ghi, xám nâu đôi chỗ lẫn sạn sỏi</P>
						</div>

					</div>
				</div>
			</div>

		</div>
	</div>
	<script type="text/javascript" src="./Sandcastle-header.js"></script>

	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"
		integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN"
		crossorigin="anonymous"></script>

	<script>
		function OpenStreetMapNominatimGeocoder() { }
		var duongOngNuocString = `<%= results.duongOngNuoc ? JSON.stringify(results.duongOngNuoc) : "{}" %>`
		var duongOngNuoc = JSON.parse(duongOngNuocString.replace(/&#34;/g, '"'));
		var loKhoanString = `<%= results.loKhoan ? JSON.stringify(results.loKhoan) : "{}" %>`
		var loKhoan = JSON.parse(loKhoanString.replace(/&#34;/g, '"'));
		var quanHuyenString = `<%= results.quanHuyen ? JSON.stringify(results.quanHuyen) : "{}" %>`
		var quanHuyen = JSON.parse(quanHuyenString.replace(/&#34;/g, '"'));
		var duongOngCapNuocString = `<%= results.duongOngCapNuoc ? JSON.stringify(results.duongOngCapNuoc) : "{}" %>`
		var duongOngCapNuoc = JSON.parse(duongOngCapNuocString.replace(/&#34;/g, '"'));
		var tangHamString = `<%= results.tangHam ? JSON.stringify(results.tangHam) : "{}" %>`
		var tangHam = JSON.parse(tangHamString.replace(/&#34;/g, '"'));
		var cocKhoanNhoiString = `<%= results.cocKhoanNhoi ? JSON.stringify(results.cocKhoanNhoi) : "{}" %>`

		var cocKhoanNhoi = JSON.parse(cocKhoanNhoiString.replace(/&#34;/g, '"'));
		// console.log(duongOngCapNuoc);
		Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI2NjFhMzBjOS02YThlLTQ4YjQtYTJlZC1mZjk0ZjJlYjkwNjUiLCJpZCI6NDY0NTEsImlhdCI6MTYxNjE1MjE1OX0.yKaMQt5T-0bNJ2yj-m16X8oYNOIxQTDj6qTu7prxr9U';
		// var extent = Cesium.Rectangle.fromDegrees(105.862212, 20.996529, 105.862212, 20.996529);
		// Cesium.Camera.DEFAULT_VIEW_RECTANGLE = extent;
		// Cesium.Camera.DEFAULT_VIEW_FACTOR = 0;


		OpenStreetMapNominatimGeocoder.prototype.geocode = function (input) {
			const endpoint = "http://localhost:4320/searchQ";
			const resource = new Cesium.Resource({
				url: endpoint,
				queryParameters: {
					format: "json",
					q: input,
				},
			});

			return resource.fetchJson().then(function (results) {
				let bboxDegrees;
				return results.map(function (resultObject) {
					bboxDegrees = typeof resultObject.boundingbox.coordinates[0] == "object" ? resultObject.boundingbox.coordinates[0][0] : resultObject.boundingbox.coordinates;
					return {
						displayName: resultObject.display_name,
						destination: Cesium.Rectangle.fromDegrees(
							bboxDegrees[0],
							bboxDegrees[1],
							bboxDegrees[0],
							bboxDegrees[1],
						),
					};
				});
			});
		};
		const viewer = new Cesium.Viewer('cesiumContainer', {
			terrainProvider: Cesium.createWorldTerrain(),
			geocoder: new OpenStreetMapNominatimGeocoder(),
			infoBox: false
		});
		viewer.homeButton.viewModel.command.beforeExecute.addEventListener(
			function (e) {
				e.cancel = true;
				viewer.scene.camera.flyTo({
					destination: Cesium.Cartesian3.fromDegrees(105.862212, 20.996529, 400),
					orientation: {
						heading: Cesium.Math.toRadians(0.0),
						pitch: Cesium.Math.toRadians(-15.0),
					}
				});
			});
		var camera = viewer.camera;
		const scene = viewer.scene;
		const globe = scene.globe;
		var ellipsoid = Cesium.Ellipsoid.WGS84;
		var geodesic = new Cesium.EllipsoidGeodesic();

		scene.screenSpaceCameraController.enableCollisionDetection = false;
		globe.translucency.frontFaceAlphaByDistance = new Cesium.NearFarScalar(
			400.0,
			0.0,
			800.0,
			1.0
		);

		const CapNuocUnDer = viewer.scene.primitives.add(
			new Cesium.Cesium3DTileset({
				url: Cesium.IonResource.fromAssetId(1478626)
			})
		);
		const CAPNUOC = viewer.scene.primitives.add(
			new Cesium.Cesium3DTileset({
				url: Cesium.IonResource.fromAssetId(1478625)
			})
		);
		const entities = viewer.entities;
		const boxes = entities.add(new Cesium.Entity());
		const parentLayerDuongOngThoatNuoc = entities.add(new Cesium.Entity());
		const parentLayerDuongOngCapNuoc = entities.add(new Cesium.Entity());
		const parentLayerCongTrinhCoTangHam = entities.add(new Cesium.Entity());
		const parentLayerCocKhoanNhoi = entities.add(new Cesium.Entity());




		function computeCircle(radius) {
			const positions = [];
			for (let i = 0; i < 360; i++) {
				const radians = Cesium.Math.toRadians(i);
				positions.push(
					new Cesium.Cartesian2(
						radius * Math.cos(radians),
						radius * Math.sin(radians)
					)
				);
			}
			return positions;
		}

		const tachKichCoDuongOng1 = (data) => {
			var cd = '';
			for (let index = 0; index < data.length; index++) {
				if (data[index] == 'x') {
					cd = data.slice(0, index - 1);
					break;
				}
			}
			return parseInt(cd);
		}

		const tachKichCoDuongOng2 = (data) => {
			var cr = '';
			for (let index = 0; index < data.length; index++) {
				if (data[index] == 'x') {
					cr = data.slice(-(index - 1), data.length);
					break;
				}
			}
			return parseInt(cr);
		}

		const lapDuongOngCapNuoc = (element) => {
			var fromDegreesArrayLayerDuongOngThoatNuoc = [];
			element.geometry.coordinates.forEach(e => {
				e.forEach(el => {
					fromDegreesArrayLayerDuongOngThoatNuoc.push(el[0]);
					fromDegreesArrayLayerDuongOngThoatNuoc.push(el[1]);
					// console.log(typeof element.properties.chieusauch, -element.properties.chieusauch / 100);
					if (typeof element.properties.ChieuSauCh == "number") {
						fromDegreesArrayLayerDuongOngThoatNuoc.push(-15 + parseFloat((-element.properties.ChieuSauCh / 100).toFixed(1)));
					} else {
						fromDegreesArrayLayerDuongOngThoatNuoc.push(-15 + parseFloat((-parseFloat(element.properties.ChieuSauCh) / 100).toFixed(1)));
					}
				});
			});
			return fromDegreesArrayLayerDuongOngThoatNuoc
		}
		const lapDuongOngThoatNuoc = (element) => {
			var fromDegreesArrayLayerDuongOngThoatNuoc = [];
			element.geometry.coordinates.forEach(e => {
				e.forEach(el => {
					fromDegreesArrayLayerDuongOngThoatNuoc.push(el[0]);
					fromDegreesArrayLayerDuongOngThoatNuoc.push(el[1]);
					// console.log(typeof element.properties.chieusauch, -element.properties.chieusauch / 100);
					if (typeof element.properties.ChieuSauDa == "number") {
						fromDegreesArrayLayerDuongOngThoatNuoc.push(-15 + parseFloat((-element.properties.ChieuSauDa / 100).toFixed(1)));
					} else {
						fromDegreesArrayLayerDuongOngThoatNuoc.push(-15 + parseFloat((-parseFloat(element.properties.ChieuSauDa) / 100).toFixed(1)));
					}
				});
			});
			return fromDegreesArrayLayerDuongOngThoatNuoc
		}

		var loKhoanSource = new Cesium.GeoJsonDataSource();
		var cocKhoanNhoiSource = new Cesium.GeoJsonDataSource();
		var quanHuyenSource = new Cesium.GeoJsonDataSource();
		var matCatSource = new Cesium.GeoJsonDataSource();
		var tangHamSource = new Cesium.GeoJsonDataSource();
		var nhaCaoTangSource = new Cesium.GeoJsonDataSource();

		// if (!viewer.dataSources.contains(tangHamSource)) {
		// 	viewer.dataSources.add(tangHamSource);
		// }




		// duongOngNuoc.features.forEach(element => {
		// 	if (element.geometry) {
		// 		// console.log(element.properties.duongkinho);
		// 		if (element.properties.kichthuoc.indexOf('x') == -1) {
		// 			entities.add({
		// 				parent: parentLayerDuongOngThoatNuoc,
		// 				name: element.properties.matuyentho,
		// 				polylineVolume: {
		// 					positions: Cesium.Cartesian3.fromDegreesArrayHeights(lapDuongOng(element)),
		// 					shape: computeCircle(parseInt(element.properties.kichthuoc) / 1000),
		// 					material: Cesium.Color.RED,
		// 				},
		// 			});
		// 		} else {
		// 			entities.add({
		// 				parent: parentLayerDuongOngThoatNuoc,
		// 				name: element.properties.matuyentho,
		// 				polylineVolume: {
		// 					positions: Cesium.Cartesian3.fromDegreesArrayHeights(lapDuongOng(element)),
		// 					shape: [
		// 						new Cesium.Cartesian2(-tachKichCoDuongOng1(element.properties.kichthuoc) / 1000, -tachKichCoDuongOng2(element.properties.kichthuoc) / 1000),
		// 						new Cesium.Cartesian2(tachKichCoDuongOng1(element.properties.kichthuoc) / 1000, -tachKichCoDuongOng2(element.properties.kichthuoc) / 1000),
		// 						new Cesium.Cartesian2(tachKichCoDuongOng1(element.properties.kichthuoc) / 1000, tachKichCoDuongOng2(element.properties.kichthuoc) / 1000),
		// 						new Cesium.Cartesian2(-tachKichCoDuongOng1(element.properties.kichthuoc) / 1000, tachKichCoDuongOng2(element.properties.kichthuoc) / 1000),
		// 					],
		// 					cornerType: Cesium.CornerType.BEVELED,
		// 					material: Cesium.Color.RED,
		// 				},
		// 			});
		// 		}
		// 	}
		// });





		// duongOngCapNuoc.features.forEach(element => {
		// 	if (element.geometry) {
		// 		if (element.properties.duongkinho.indexOf('x') == -1) {
		// 			entities.add({
		// 				parent: parentLayerDuongOngCapNuoc,
		// 				name: element.properties.maduongong,
		// 				polylineVolume: {
		// 					positions: Cesium.Cartesian3.fromDegreesArrayHeights(lapDuongOng(element)),
		// 					shape: computeCircle(600 / 1000),
		// 					material: Cesium.Color.BLUE,
		// 				},
		// 			});
		// 		} else {
		// 			entities.add({
		// 				parent: parentLayerDuongOngCapNuoc,
		// 				name: element.properties.maduongong,
		// 				polylineVolume: {
		// 					positions: Cesium.Cartesian3.fromDegreesArrayHeights(lapDuongOng(element)),
		// 					shape: [
		// 						new Cesium.Cartesian2(-tachKichCoDuongOng1(element.properties.duongkinho) / 1000, -tachKichCoDuongOng2(element.properties.duongkinho) / 1000),
		// 						new Cesium.Cartesian2(tachKichCoDuongOng1(element.properties.duongkinho) / 1000, -tachKichCoDuongOng2(element.properties.duongkinho) / 1000),
		// 						new Cesium.Cartesian2(tachKichCoDuongOng1(element.properties.duongkinho) / 1000, tachKichCoDuongOng2(element.properties.duongkinho) / 1000),
		// 						new Cesium.Cartesian2(-tachKichCoDuongOng1(element.properties.duongkinho) / 1000, tachKichCoDuongOng2(element.properties.duongkinho) / 1000),
		// 					],
		// 					cornerType: Cesium.CornerType.BEVELED,
		// 					material: Cesium.Color.BLUE,
		// 				},
		// 			});
		// 		}
		// 	}
		// });

		const vm1 = {
			translucencyEnabled: true,
			fadeByDistance: true,
			showVectorData: false,
			alpha: 0.5,
		};

		Cesium.knockout.track(vm1);
		const toolbar = document.getElementById("toolbar");
		Cesium.knockout.applyBindings(vm1, toolbar);
		for (const name in vm1) {
			if (vm1.hasOwnProperty(name)) {
				Cesium.knockout.getObservable(vm1, name).subscribe(update);
			}
		}

		function update() {
			globe.translucency.enabled = vm1.translucencyEnabled;
			let alpha = Number(vm1.alpha);
			alpha = !isNaN(alpha) ? alpha : 1.0;
			alpha = Cesium.Math.clamp(alpha, 0.0, 1.0);
			globe.translucency.frontFaceAlphaByDistance.nearValue = alpha;
			globe.translucency.frontFaceAlphaByDistance.farValue = vm1.fadeByDistance
				? 1.0
				: alpha;

			// polygon.show = viewModel.showVectorData;
			// polyline.show = viewModel.showVectorData;
		}
		update();
		const btQuanHuyenHN = async (e) => {
			if (e.checked) {
				quanHuyenSource.load(quanHuyen, {
					stroke: Cesium.Color.YELLOW,
					fill: Cesium.Color.YELLOW.withAlpha(0.1),
					strokeWidth: 3,
				}).then((dataSource) => {
					const entities = dataSource.entities.values;
					for (let i = 0; i < entities.length; i++) {
						const entity = entities[i];
						entity.moTa = {
							'Quận/Huyện': entity.properties._name_2._value
						}
						entity.polygon.height =
							-15;
					}
				}).catch(function (error) {
					window.alert(error);
				});
				viewer.dataSources.add(quanHuyenSource)
			} else {
				viewer.dataSources.remove(quanHuyenSource)
			}
		}
		const btMatCat = async (e) => {
			if (e.checked) {
				matCatSource.load("http://localhost:4320/uploads/geojson/mat_cat.geojson", {
					stroke: Cesium.Color.fromCssColorString('#B8E986'),
					strokeWidth: 3,
				}).then((dataSource) => {
					const entities = dataSource.entities.values;
					for (let i = 0; i < entities.length; i++) {
						const entity = entities[i];
						console.log({
							MaMatCat: entity.properties._MaMatCat._value,
							TenMatCat: entity.properties._TenMatCat._value,
						});
						entity.moTa = {
							MaMatCat: entity.properties._MaMatCat._value,
							TenMatCat: entity.properties._TenMatCat._value,
						}
						// entity.polygon.height = -15;
					}
				}).catch(function (error) {
					window.alert(error);
				});
				viewer.dataSources.add(matCatSource)
			} else {
				viewer.dataSources.remove(matCatSource)
			}
		}
		const btHoKhoan = async (e) => {
			if (e.checked) {
				loKhoanSource.load(loKhoan, {
					markerColor: Cesium.Color.GREEN,
					markerSize: 28
				})
				viewer.dataSources.add(loKhoanSource);
				loKhoan.features.forEach(element => {
					if (element.geometry) {
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop1' + element.properties.tenhokhoan,
							name: 'bedaylop1',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], -15 - element.properties.bedaylop1 / 2),
							cylinder: {
								length: element.properties.bedaylop1,
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#86d3bb')
							},
							label: element.properties.bedaylop1 > 0 ? {
								text: 'Lớp 1',
								font: "8px sans-serif",
								showBackground: true,
								eyeOffset: Cesium.Cartesian3(0.0, 0.0, -10.0),
								horizontalOrigin: Cesium.HorizontalOrigin.RIGHT,
								pixelOffset: Cesium.Cartesian2(0.0, -20.0),
								pixelOffsetScaleByDistance: Cesium.NearFarScalar(
									1.5e2,
									3.0,
									1.5e7,
									0.5
								),
								disableDepthTestDistance: 1.2742018 * 10 ** 7,
							} : {},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop2' + element.properties.tenhokhoan,
							name: 'bedaylop2',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], -15 - (element.properties.bedaylop1 + element.properties.bedaylop2 / 2)),
							cylinder: {
								length: element.properties.bedaylop2,
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#72c4a9')
							}, label: element.properties.bedaylop2 > 0 ? {
								text: 'Lớp 2',
								font: "8px sans-serif",
								showBackground: true,
								eyeOffset: Cesium.Cartesian3(0.0, 0.0, -10.0),
								horizontalOrigin: Cesium.HorizontalOrigin.RIGHT,
								pixelOffset: Cesium.Cartesian2(0.0, -20.0),
								pixelOffsetScaleByDistance: Cesium.NearFarScalar(
									1.5e2,
									3.0,
									1.5e7,
									0.5
								),
								disableDepthTestDistance: 1.2742018 * 10 ** 7,
							} : {},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop3' + element.properties.tenhokhoan,
							name: 'bedaylop3',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], -15 - (element.properties.bedaylop1 + element.properties.bedaylop2 + element.properties.bedaylop3 / 2)),
							cylinder: {
								length: element.properties.bedaylop3,
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#58b596')
							}, label: element.properties.bedaylop3 > 0 ? {
								text: 'Lớp 3',
								font: "8px sans-serif",
								showBackground: true,
								eyeOffset: Cesium.Cartesian3(0.0, 0.0, -10.0),
								horizontalOrigin: Cesium.HorizontalOrigin.RIGHT,
								pixelOffset: Cesium.Cartesian2(0.0, -20.0),
								pixelOffsetScaleByDistance: Cesium.NearFarScalar(
									1.5e2,
									3.0,
									1.5e7,
									0.5
								),
								disableDepthTestDistance: 1.2742018 * 10 ** 7,
							} : {},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop4' + element.properties.tenhokhoan,
							name: 'bedaylop4',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], -15 - (element.properties.bedaylop1 + element.properties.bedaylop2 + element.properties.bedaylop3 + element.properties.bedaylop4 / 2)),
							cylinder: {
								length: element.properties.bedaylop4,
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#44aa89')
							}, label: element.properties.bedaylop4 > 0 ? {
								text: 'Lớp 4',
								font: "8px sans-serif",
								showBackground: true,
								eyeOffset: Cesium.Cartesian3(0.0, 0.0, -10.0),
								horizontalOrigin: Cesium.HorizontalOrigin.RIGHT,
								pixelOffset: Cesium.Cartesian2(0.0, -20.0),
								pixelOffsetScaleByDistance: Cesium.NearFarScalar(
									1.5e2,
									3.0,
									1.5e7,
									0.5
								),
								disableDepthTestDistance: 1.2742018 * 10 ** 7,
							} : {},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop5' + element.properties.tenhokhoan,
							name: 'bedaylop5',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], -15 - (element.properties.bedaylop1 + element.properties.bedaylop2 + element.properties.bedaylop3 + element.properties.bedaylop4 + element.properties.bedaylop5 / 2)),
							cylinder: {
								length: element.properties.bedaylop5,
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#52b092')
							}, label: element.properties.bedaylop5 > 0 ? {
								text: 'Lớp 5',
								font: "8px sans-serif",
								showBackground: true,
								eyeOffset: Cesium.Cartesian3(0.0, 0.0, -10.0),
								horizontalOrigin: Cesium.HorizontalOrigin.RIGHT,
								pixelOffset: Cesium.Cartesian2(0.0, -20.0),
								pixelOffsetScaleByDistance: Cesium.NearFarScalar(
									1.5e2,
									3.0,
									1.5e7,
									0.5
								),
								disableDepthTestDistance: 1.2742018 * 10 ** 7,
							} : {},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop6' + element.properties.tenhokhoan,
							name: 'bedaylop6',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], -15 - (element.properties.bedaylop1 + element.properties.bedaylop2 + element.properties.bedaylop3 + element.properties.bedaylop4 + element.properties.bedaylop5 + element.properties.bedaylop6 / 2)),
							cylinder: {
								length: element.properties.bedaylop6,
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#9cb075')
							}, label: element.properties.bedaylop6 > 0 ? {
								text: 'Lớp 6',
								font: "8px sans-serif",
								showBackground: true,
								eyeOffset: Cesium.Cartesian3(0.0, 0.0, -10.0),
								horizontalOrigin: Cesium.HorizontalOrigin.RIGHT,
								pixelOffset: Cesium.Cartesian2(0.0, -20.0),
								pixelOffsetScaleByDistance: Cesium.NearFarScalar(
									1.5e2,
									3.0,
									1.5e7,
									0.5
								),
								disableDepthTestDistance: 1.2742018 * 10 ** 7,
							} : {},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop7' + element.properties.tenhokhoan,
							name: 'bedaylop7',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], -15 - (element.properties.bedaylop1 + element.properties.bedaylop2 + element.properties.bedaylop3 + element.properties.bedaylop4 + element.properties.bedaylop5 + element.properties.bedaylop6 + element.properties.bedaylop7 / 2)),
							cylinder: {
								length: element.properties.bedaylop7,
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#6d863d')
							}, label: element.properties.bedaylop7 > 0 ? {
								text: 'Lớp 7',
								font: "8px sans-serif",
								showBackground: true,
								eyeOffset: Cesium.Cartesian3(0.0, 0.0, -10.0),
								horizontalOrigin: Cesium.HorizontalOrigin.RIGHT,
								pixelOffset: Cesium.Cartesian2(0.0, -20.0),
								pixelOffsetScaleByDistance: Cesium.NearFarScalar(
									1.5e2,
									3.0,
									1.5e7,
									0.5
								),
								disableDepthTestDistance: 1.2742018 * 10 ** 7,
							} : {},
						});

						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop8' + element.properties.tenhokhoan,
							name: 'bedaylop8',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], -15 - (element.properties.bedaylop1 + element.properties.bedaylop2 + element.properties.bedaylop3 + element.properties.bedaylop4 + element.properties.bedaylop5 + element.properties.bedaylop6 + element.properties.bedaylop7 + element.properties.bedaylop8 / 2)),
							cylinder: {
								length: element.properties.bedaylop8,
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#627835')
							},
							label: element.properties.bedaylop8 > 0 ? {
								text: 'Lớp 8',
								font: "8px sans-serif",
								showBackground: true,
								eyeOffset: Cesium.Cartesian3(0.0, 0.0, -10.0),
								horizontalOrigin: Cesium.HorizontalOrigin.RIGHT,
								pixelOffset: Cesium.Cartesian2(0.0, -20.0),
								pixelOffsetScaleByDistance: Cesium.NearFarScalar(
									1.5e2,
									3.0,
									1.5e7,
									0.5
								),
								disableDepthTestDistance: 1.2742018 * 10 ** 7,
							} : {},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop9' + element.properties.tenhokhoan,
							name: 'bedaylop9',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], -15 - (element.properties.bedaylop1 + element.properties.bedaylop2 + element.properties.bedaylop3 + element.properties.bedaylop4 + element.properties.bedaylop5 + element.properties.bedaylop6 + element.properties.bedaylop7 + element.properties.bedaylop8 + element.properties.bedaylop9 / 2)),
							cylinder: {
								length: element.properties.bedaylop9,
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#5b6f30')
							},
							label: element.properties.bedaylop9 > 0 ? {
								text: 'Lớp 9',
								font: "8px sans-serif",
								showBackground: true,
								eyeOffset: Cesium.Cartesian3(0.0, 0.0, -10.0),
								horizontalOrigin: Cesium.HorizontalOrigin.RIGHT,
								pixelOffset: Cesium.Cartesian2(0.0, -20.0),
								pixelOffsetScaleByDistance: Cesium.NearFarScalar(
									1.5e2,
									3.0,
									1.5e7,
									0.5
								),
								disableDepthTestDistance: 1.2742018 * 10 ** 7,
							} : {},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop10' + element.properties.tenhokhoan,
							name: 'bedaylop10',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], -15 - (element.properties.bedaylop1 + element.properties.bedaylop2 + element.properties.bedaylop3 + element.properties.bedaylop4 + element.properties.bedaylop5 + element.properties.bedaylop6 + element.properties.bedaylop7 + element.properties.bedaylop8 + element.properties.bedaylop9 + element.properties.bedaylop10 / 2)),
							cylinder: {
								length: element.properties.bedaylop10,
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#53672b')
							},
							label: element.properties.bedaylop10 > 0 ? {
								text: 'Lớp 10',
								font: "8px sans-serif",
								showBackground: true,
								eyeOffset: Cesium.Cartesian3(0.0, 0.0, -10.0),
								horizontalOrigin: Cesium.HorizontalOrigin.RIGHT,
								pixelOffset: Cesium.Cartesian2(0.0, -20.0),
								pixelOffsetScaleByDistance: Cesium.NearFarScalar(
									1.5e2,
									3.0,
									1.5e7,
									0.5
								),
								disableDepthTestDistance: 1.2742018 * 10 ** 7,
							} : {},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop11' + element.properties.tenhokhoan,
							name: 'bedaylop11',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], -15 - (element.properties.bedaylop1 + element.properties.bedaylop2 + element.properties.bedaylop3 + element.properties.bedaylop4 + element.properties.bedaylop5 + element.properties.bedaylop6 + element.properties.bedaylop7 + element.properties.bedaylop8 + element.properties.bedaylop9 + element.properties.bedaylop10 + element.properties.bedaylop11 / 2)),
							cylinder: {
								length: element.properties.bedaylop11,
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#c98b5d'),
							},
							label: element.properties.bedaylop11 > 0 ? {
								text: 'Lớp 11',
								font: "8px sans-serif",
								showBackground: true,
								eyeOffset: Cesium.Cartesian3(0.0, 0.0, -10.0),
								horizontalOrigin: Cesium.HorizontalOrigin.RIGHT,
								pixelOffset: Cesium.Cartesian2(0.0, -20.0),
								pixelOffsetScaleByDistance: Cesium.NearFarScalar(
									1.5e2,
									3.0,
									1.5e7,
									0.5
								),
								disableDepthTestDistance: 1.2742018 * 10 ** 7,
							} : {},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop12' + element.properties.tenhokhoan,
							name: 'bedaylop12',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], -15 - (element.properties.bedaylop1 + element.properties.bedaylop2 + element.properties.bedaylop3 + element.properties.bedaylop4 + element.properties.bedaylop5 + element.properties.bedaylop6 + element.properties.bedaylop7 + element.properties.bedaylop8 + element.properties.bedaylop9 + element.properties.bedaylop10 + element.properties.bedaylop11 + element.properties.bedaylop12 / 2)),
							cylinder: {
								length: element.properties.bedaylop12,
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#ea8c40'),
							},
							label: element.properties.bedaylop12 > 0 ? {
								text: 'Lớp 12',
								font: "8px sans-serif",
								showBackground: true,
								eyeOffset: Cesium.Cartesian3(0.0, 0.0, -10.0),
								horizontalOrigin: Cesium.HorizontalOrigin.RIGHT,
								pixelOffset: Cesium.Cartesian2(0.0, -20.0),
								pixelOffsetScaleByDistance: Cesium.NearFarScalar(
									1.5e2,
									3.0,
									1.5e7,
									0.5
								),
								disableDepthTestDistance: 1.2742018 * 10 ** 7,
							} : {},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop13' + element.properties.tenhokhoan,
							name: 'bedaylop13',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], -15 - (element.properties.bedaylop1 + element.properties.bedaylop2 + element.properties.bedaylop3 + element.properties.bedaylop4 + element.properties.bedaylop5 + element.properties.bedaylop6 + element.properties.bedaylop7 + element.properties.bedaylop8 + element.properties.bedaylop9 + element.properties.bedaylop10 + element.properties.bedaylop11 + element.properties.bedaylop12 + element.properties.bedaylop13 / 2)),
							cylinder: {
								length: element.properties.bedaylop13,
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#c87330'),
							},
							label: element.properties.bedaylop13 > 0 ? {
								text: 'Lớp 13',
								font: "8px sans-serif",
								showBackground: true,
								eyeOffset: Cesium.Cartesian3(0.0, 0.0, -10.0),
								horizontalOrigin: Cesium.HorizontalOrigin.RIGHT,
								pixelOffset: Cesium.Cartesian2(0.0, -20.0),
								pixelOffsetScaleByDistance: Cesium.NearFarScalar(
									1.5e2,
									3.0,
									1.5e7,
									0.5
								),
								disableDepthTestDistance: 1.2742018 * 10 ** 7,
							} : {},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop14' + element.properties.tenhokhoan,
							name: 'bedaylop14',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], -15 - (element.properties.bedaylop1 + element.properties.bedaylop2 + element.properties.bedaylop3 + element.properties.bedaylop4 + element.properties.bedaylop5 + element.properties.bedaylop6 + element.properties.bedaylop7 + element.properties.bedaylop8 + element.properties.bedaylop9 + element.properties.bedaylop10 + element.properties.bedaylop11 + element.properties.bedaylop12 + element.properties.bedaylop13 + element.properties.bedaylop14 / 2)),
							cylinder: {
								length: element.properties.bedaylop14,
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#a7551a'),
							},
							label: element.properties.bedaylop14 > 0 ? {
								text: 'Lớp 14',
								font: "8px sans-serif",
								showBackground: true,
								eyeOffset: Cesium.Cartesian3(0.0, 0.0, -10.0),
								horizontalOrigin: Cesium.HorizontalOrigin.RIGHT,
								pixelOffset: Cesium.Cartesian2(0.0, -20.0),
								pixelOffsetScaleByDistance: Cesium.NearFarScalar(
									1.5e2,
									3.0,
									1.5e7,
									0.5
								),
								disableDepthTestDistance: 1.2742018 * 10 ** 7,
							} : {},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop15' + element.properties.tenhokhoan,
							name: 'bedaylop15',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], -15 - (element.properties.bedaylop1 + element.properties.bedaylop2 + element.properties.bedaylop3 + element.properties.bedaylop4 + element.properties.bedaylop5 + element.properties.bedaylop6 + element.properties.bedaylop7 + element.properties.bedaylop8 + element.properties.bedaylop9 + element.properties.bedaylop10 + element.properties.bedaylop11 + element.properties.bedaylop12 + element.properties.bedaylop13 + element.properties.bedaylop14 + element.properties.bedaylop15 / 2)),
							cylinder: {
								length: element.properties.bedaylop15,
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#a8612e'),
							},
							label: element.properties.bedaylop15 > 0 ? {
								text: 'Lớp 15',
								font: "8px sans-serif",
								showBackground: true,
								eyeOffset: Cesium.Cartesian3(0.0, 0.0, -10.0),
								horizontalOrigin: Cesium.HorizontalOrigin.RIGHT,
								pixelOffset: Cesium.Cartesian2(0.0, -20.0),
								pixelOffsetScaleByDistance: Cesium.NearFarScalar(
									1.5e2,
									3.0,
									1.5e7,
									0.5
								),
								disableDepthTestDistance: 1.2742018 * 10 ** 7,
							} : {},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop16' + element.properties.tenhokhoan,
							name: 'bedaylop16',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], -15 - (element.properties.bedaylop1 + element.properties.bedaylop2 + element.properties.bedaylop3 + element.properties.bedaylop4 + element.properties.bedaylop5 + element.properties.bedaylop6 + element.properties.bedaylop7 + element.properties.bedaylop8 + element.properties.bedaylop9 + element.properties.bedaylop10 + element.properties.bedaylop11 + element.properties.bedaylop12 + element.properties.bedaylop13 + element.properties.bedaylop14 + element.properties.bedaylop15 + element.properties.bedaylop16 / 2)),
							cylinder: {
								length: element.properties.bedaylop16,
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#959297'),
							},
							label: element.properties.bedaylop16 > 0 ? {
								text: 'Lớp 16',
								font: "8px sans-serif",
								showBackground: true,
								eyeOffset: Cesium.Cartesian3(0.0, 0.0, -10.0),
								horizontalOrigin: Cesium.HorizontalOrigin.RIGHT,
								pixelOffset: Cesium.Cartesian2(0.0, -20.0),
								pixelOffsetScaleByDistance: Cesium.NearFarScalar(
									1.5e2,
									3.0,
									1.5e7,
									0.5
								),
								disableDepthTestDistance: 1.2742018 * 10 ** 7,
							} : {},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop17' + element.properties.tenhokhoan,
							name: 'bedaylop17',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], -15 - (element.properties.bedaylop1 + element.properties.bedaylop2 + element.properties.bedaylop3 + element.properties.bedaylop4 + element.properties.bedaylop5 + element.properties.bedaylop6 + element.properties.bedaylop7 + element.properties.bedaylop8 + element.properties.bedaylop9 + element.properties.bedaylop10 + element.properties.bedaylop11 + element.properties.bedaylop12 + element.properties.bedaylop13 + element.properties.bedaylop14 + element.properties.bedaylop15 + element.properties.bedaylop16 + element.properties.bedaylop17 / 2)),
							cylinder: {
								length: element.properties.bedaylop17,
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#4d7cb5'),
							},
							label: element.properties.bedaylop17 > 0 ? {
								text: 'Lớp 17',
								font: "8px sans-serif",
								showBackground: true,
								eyeOffset: Cesium.Cartesian3(0.0, 0.0, -10.0),
								horizontalOrigin: Cesium.HorizontalOrigin.RIGHT,
								pixelOffset: Cesium.Cartesian2(0.0, -20.0),
								pixelOffsetScaleByDistance: Cesium.NearFarScalar(
									1.5e2,
									3.0,
									1.5e7,
									0.5
								),
								disableDepthTestDistance: 1.2742018 * 10 ** 7,
							} : {},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop18' + element.properties.tenhokhoan,
							name: 'bedaylop18',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], -15 - (element.properties.bedaylop1 + element.properties.bedaylop2 + element.properties.bedaylop3 + element.properties.bedaylop4 + element.properties.bedaylop5 + element.properties.bedaylop6 + element.properties.bedaylop7 + element.properties.bedaylop8 + element.properties.bedaylop9 + element.properties.bedaylop10 + element.properties.bedaylop11 + element.properties.bedaylop12 + element.properties.bedaylop13 + element.properties.bedaylop14 + element.properties.bedaylop15 + element.properties.bedaylop16 + element.properties.bedaylop17 + element.properties.bedaylop18 / 2)),
							cylinder: {
								length: element.properties.bedaylop18,
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#3a618f'),
							},
							label: element.properties.bedaylop18 > 0 ? {
								text: 'Lớp 18',
								font: "8px sans-serif",
								showBackground: true,
								eyeOffset: Cesium.Cartesian3(0.0, 0.0, -10.0),
								horizontalOrigin: Cesium.HorizontalOrigin.RIGHT,
								pixelOffset: Cesium.Cartesian2(0.0, -20.0),
								pixelOffsetScaleByDistance: Cesium.NearFarScalar(
									1.5e2,
									3.0,
									1.5e7,
									0.5
								),
								disableDepthTestDistance: 1.2742018 * 10 ** 7,
							} : {},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop19' + element.properties.tenhokhoan,
							name: 'bedaylop19',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], -15 - (element.properties.bedaylop1 + element.properties.bedaylop2 + element.properties.bedaylop3 + element.properties.bedaylop4 + element.properties.bedaylop5 + element.properties.bedaylop6 + element.properties.bedaylop7 + element.properties.bedaylop8 + element.properties.bedaylop9 + element.properties.bedaylop10 + element.properties.bedaylop11 + element.properties.bedaylop12 + element.properties.bedaylop13 + element.properties.bedaylop14 + element.properties.bedaylop15 + element.properties.bedaylop16 + element.properties.bedaylop17 + element.properties.bedaylop18 + element.properties.bedaylop19 / 2)),
							cylinder: {
								length: element.properties.bedaylop19,
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#284569'),
							},
							label: element.properties.bedaylop19 > 0 ? {
								text: 'Lớp 19',
								font: "8px sans-serif",
								showBackground: true,
								eyeOffset: Cesium.Cartesian3(0.0, 0.0, -10.0),
								horizontalOrigin: Cesium.HorizontalOrigin.RIGHT,
								pixelOffset: Cesium.Cartesian2(0.0, -20.0),
								pixelOffsetScaleByDistance: Cesium.NearFarScalar(
									1.5e2,
									3.0,
									1.5e7,
									0.5
								),
								disableDepthTestDistance: 1.2742018 * 10 ** 7,
							} : {},
						});
					} else {
						console.log(element);

					}
				});
			} else {
				viewer.dataSources.remove(loKhoanSource)
				loKhoan.features.forEach(element => {
					if (element.geometry) {
						for (let index = 0; index < 19; index++) {
							entities.removeById('bedaylop' + JSON.stringify(index + 1) + element.properties.tenhokhoan);
						}
					}
				});
			}
		}

		const btCocKhoanNhoi = async (e) => {
			if (e.checked) {
				cocKhoanNhoiSource.load(cocKhoanNhoi, {
					markerColor: Cesium.Color.fromCssColorString('#702af7'),
					// markerColor: Cesium.Color.YELLOW,
					markerSize: 28
				})
				viewer.dataSources.add(cocKhoanNhoiSource);
				cocKhoanNhoi.features.forEach(element => {
					if (element.geometry) {
						entities.add({
							id: 'cocKhoanNhoi' + element.properties.f1,
							parent: parentLayerCocKhoanNhoi,
							name: element.properties.f1,
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], -15 - (element.properties.f2 / 2)),
							cylinder: {
								length: element.properties.f2,
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#702af7')
							},
							moTa: {
								'Mã công trình': element.properties.f1,
								'Số lượng tầng': element.properties.f2,
							}
						});
					}
				});
			} else {
				viewer.dataSources.remove(cocKhoanNhoiSource)
				cocKhoanNhoi.features.forEach(element => {
					if (element.geometry) {
						entities.removeById('cocKhoanNhoi' + element.properties.f1);
					}
				});
			}
		}

		const parentLayerTangHam = entities.add(new Cesium.Entity());

		const btTangHam = async (e) => {
			if (e.checked) {
				tangHamSource.load("http://localhost:4320/uploads/geojson/TangHamCCCongTrinhXayDung.geojson").then(function (dataSource) {
					const entities = dataSource.entities.values;
					const colorHash = {};
					for (let i = 0; i < entities.length; i++) {
						const entity = entities[i];
						entity.parent = parentLayerTangHam;
						entity.polygon.material = Cesium.Color.PINK;
						entity.polygon.outline = false;
						entity.polygon.extrudedHeight =
							- 15;
						entity.polygon.height =
							- 15 - entity.properties.ChieuCao + entity.properties.ChieuSauMa;
						entity.id =
							'tangHamCongTrinhXayDung'
						entity.moTa = {
							"MaCongTrin": entity.properties.MaCongTrin,
							"MaHieuTuye": entity.properties.MaHieuTuye,
							"TenCongTri": entity.properties.TenCongTri,
							"HangMuc": entity.properties.HangMuc,
							"DiaDiem": entity.properties.DiaDiem,
							"DienTichSa": entity.properties.DienTichSa,
							"KinhThuocT": entity.properties.KinhThuocT,
							"LoaiMong": entity.properties.LoaiMong,
							"DuongKinhC": entity.properties.DuongKinhC,
							"ChieuSauDa": entity.properties.ChieuSauDa,
							"CapCongTri": entity.properties.CapCongTri,
							"SoLuongTan": entity.properties.SoLuongTan,
							"SoLuongT00": entity.properties.SoLuongT00,
							"ViTriXayDu": entity.properties.ViTriXayDu,
							"QuanHuyen": entity.properties.QuanHuyen,
							"PhuongXa": entity.properties.PhuongXa,
							"TenChuSoHu": entity.properties.TenChuSoHu,
							"ThongTinLi": entity.properties.ThongTinLi,
							"ChieuDai": entity.properties.ChieuDai,
							"ChieuRong": entity.properties.ChieuRong,
							"ChieuCao": entity.properties.ChieuCao,
							"ChieuSauMa": entity.properties.ChieuSauMa,
						}
					}
				})
					.catch(function (error) {
						window.alert(error);
					});
				viewer.dataSources.add(tangHamSource);

			} else {
				viewer.dataSources.remove(tangHamSource);

			}
		}


		const btCongTrinhCoTangHam = async (e) => {
			if (e.checked) {
				const promiseNhaCaoTang = Cesium.GeoJsonDataSource.load(
					"http://localhost:4320/uploads/geojson/NhaCaoTang.geojson"
				);
				tangHamSource.load("http://localhost:4320/uploads/geojson/NhaCaoTang.geojson")
					.then(function (dataSource) {
						const entities = dataSource.entities.values;
						const colorHash = {};
						for (let i = 0; i < entities.length; i++) {
							const entity = entities[i];
							entity.parent = parentLayerCongTrinhCoTangHam;
							entity.polygon.material = Cesium.Color.DARKSLATEGRAY;
							entity.polygon.outline = false;
							entity.polygon.extrudedHeight =
								- 15;
							entity.polygon.height =
								- 15 + entity.properties.SoLuongTan * 4;
							entity.moTa = {
								"Mã công trình": entity.properties.MaCongTrin,
								"Tên công trình": entity.properties.TenCongTri,
								"Quận Huyện": entity.properties.QuanHuyen,
								"Phường Xã": entity.properties.PhuongXa,
								"Diện tích": entity.properties.DienTich,
								"Loại móng": entity.properties.LoaiMong,
								"Cấp công trình": entity.properties.CapCongTri,
								"Số lượng tầng": entity.properties.SoLuongTan,
								"Tên chủ sở hữu": entity.properties.TenChuSoHu,
								"Thông tin": entity.properties.ThongTinLi,
							}
						}
					})
					.catch(function (error) {
						window.alert(error);
					});
				viewer.dataSources.add(tangHamSource);

			} else {
				viewer.dataSources.remove(tangHamSource);
			}
		}

		const btDuongOngCapNuoc = async (e) => {
			if (e.checked) {
				fetch("./uploads/geojson/DuongOngCapNuoc.geojson")
					.then((res) => res.json())
					.then((data) => {
						data.features.forEach(element => {
							if (element.geometry) {
								// if (element.properties.duongkinho.indexOf('x') == -1) {
								// console.log(element.properties.DuongKinhO, parseFloat(element.properties.DuongKinhO), parseFloat(element.properties.DuongKinhO) ? false : true);
								// console.log(lapDuongOng(element));
								if (element.properties.OBJECTID < 100) {
									entities.add({
										id: 'duongOngCapNuoc' + element.properties.OBJECTID,
										parent: parentLayerDuongOngCapNuoc,
										name: element.properties.OBJECTID,
										polylineVolume: {
											positions: Cesium.Cartesian3.fromDegreesArrayHeights(lapDuongOngCapNuoc(element)),
											shape: computeCircle(parseFloat(element.properties.DuongKinhO) ? (parseFloat(element.properties.DuongKinhO) / 1000) : (600 / 1000)),
											material: Cesium.Color.BLUE,
										},
										moTa: {
											"Mã đường ống": element.properties.MaDuongOng,
											"Mã hiệu tuyến": element.properties.MaHieuTuye,
											"Hạng mục": element.properties.HangMuc,
											"Địa điểm": element.properties.DiaDiem,
											"Loại ống": element.properties.LoaiOng,
											"Đường kính": element.properties.DuongKinhO,
											"Chất liệu": element.properties.ChatLieuOn,
											"Chiều sâu": element.properties.ChieuSauCh,
											"Chiều dài": element.properties.ChieuDaiTu,
											"Vị trí xây dựng": element.properties.ViTriXayDu,
											"Quận Huyện": element.properties.QuanHuyen,
											"Phường Xã": element.properties.PhuongXa,
											"Tên chủ sở hữu": element.properties.TenChuSoHu,
											"Thông tin": element.properties.ThongTinLi,
										}
									});
								}

								// } else {
								// 	entities.add({
								// 		parent: parentLayerDuongOngCapNuoc,
								// 		name: element.properties.maduongong,
								// 		polylineVolume: {
								// 			positions: Cesium.Cartesian3.fromDegreesArrayHeights(lapDuongOng(element)),
								// 			shape: [
								// 				new Cesium.Cartesian2(-tachKichCoDuongOng1(element.properties.duongkinho) / 1000, -tachKichCoDuongOng2(element.properties.duongkinho) / 1000),
								// 				new Cesium.Cartesian2(tachKichCoDuongOng1(element.properties.duongkinho) / 1000, -tachKichCoDuongOng2(element.properties.duongkinho) / 1000),
								// 				new Cesium.Cartesian2(tachKichCoDuongOng1(element.properties.duongkinho) / 1000, tachKichCoDuongOng2(element.properties.duongkinho) / 1000),
								// 				new Cesium.Cartesian2(-tachKichCoDuongOng1(element.properties.duongkinho) / 1000, tachKichCoDuongOng2(element.properties.duongkinho) / 1000),
								// 			],
								// 			cornerType: Cesium.CornerType.BEVELED,
								// 			material: Cesium.Color.BLUE,
								// 		},
								// 	});
								// }
							}
						});
					});
			} else {
				fetch("./uploads/geojson/DuongOngCapNuoc.geojson")
					.then((res) => res.json())
					.then((data) => {
						data.features.forEach(element => {
							if (element.geometry) {
								if (element.properties.OBJECTID < 100) {
									entities.removeById('duongOngCapNuoc' + element.properties.OBJECTID)
								}
							}
						});
					});
			}
		}

		const btDuongOngThoatNuoc = async (e) => {
			if (e.checked) {
				fetch("./uploads/geojson/DuongOngThoatNuoc.geojson")
					.then((res) => res.json())
					.then((data) => {
						data.features.forEach(element => {
							if (element.geometry) {
								// if (element.properties.duongkinho.indexOf('x') == -1) {
								// console.log(element.properties.DuongKinhO, parseFloat(element.properties.DuongKinhO), parseFloat(element.properties.DuongKinhO) ? false : true);
								// console.log(lapDuongOng(element));
								if (element.properties.OBJECTID < 100) {
									entities.add({
										id: 'duongOngThoatNuoc' + element.properties.OBJECTID,
										parent: parentLayerDuongOngThoatNuoc,
										name: element.properties.OBJECTID,
										polylineVolume: {
											positions: Cesium.Cartesian3.fromDegreesArrayHeights(lapDuongOngThoatNuoc(element)),
											shape: computeCircle(parseFloat(element.properties.DuongKinh) ? (parseFloat(element.properties.DuongKinh) / 1000) : (600 / 1000)),
											material: Cesium.Color.RED,
											moTa: {
												"Mã tuyến thô": element.properties.MaTuyenTho,
												"Mã hiệu tuyến": element.properties.MaHieuTuye,
												"Tên công trình": element.properties.TenCongTri,
												"Điểm bắt đầu": element.properties.DiemBatDau,
												"Điểm kết thúc": element.properties.DiemKetThu,
												"Hạng mục": element.properties.HangMuc,
												"Địa điểm": element.properties.DiaDiem,
												"Loại cong": element.properties.LoaiCong,
												"Kích thước": element.properties.KichThuoc,
												"Chất liệu": element.properties.ChatLieuCo,
												"Chiều sâu": element.properties.ChieuSauDa,
												"Chiều dài": element.properties.ChieuDaiTu,
												"Vị trí": element.properties.ViTriXayDu,
												"Quận Huyện": element.properties.QuanHuyen,
												"Phường Xã": element.properties.PhuongXa,
												"Tên chủ sở hữu": element.properties.TenChuSoHu,
												"Thông tin": element.properties.ThongTinLi,
											}
										},
									});
								}
								// } else {
								// 	entities.add({
								// 		parent: parentLayerDuongOngCapNuoc,
								// 		name: element.properties.maduongong,
								// 		polylineVolume: {
								// 			positions: Cesium.Cartesian3.fromDegreesArrayHeights(lapDuongOng(element)),
								// 			shape: [
								// 				new Cesium.Cartesian2(-tachKichCoDuongOng1(element.properties.duongkinho) / 1000, -tachKichCoDuongOng2(element.properties.duongkinho) / 1000),
								// 				new Cesium.Cartesian2(tachKichCoDuongOng1(element.properties.duongkinho) / 1000, -tachKichCoDuongOng2(element.properties.duongkinho) / 1000),
								// 				new Cesium.Cartesian2(tachKichCoDuongOng1(element.properties.duongkinho) / 1000, tachKichCoDuongOng2(element.properties.duongkinho) / 1000),
								// 				new Cesium.Cartesian2(-tachKichCoDuongOng1(element.properties.duongkinho) / 1000, tachKichCoDuongOng2(element.properties.duongkinho) / 1000),
								// 			],
								// 			cornerType: Cesium.CornerType.BEVELED,
								// 			material: Cesium.Color.BLUE,
								// 		},
								// 	});
								// }
							}
						});
					});
			} else {
				fetch("./uploads/geojson/DuongOngThoatNuoc.geojson")
					.then((res) => res.json())
					.then((data) => {
						data.features.forEach(element => {
							if (element.geometry) {
								if (element.properties.OBJECTID < 100) {
									entities.removeById('duongOngThoatNuoc' + element.properties.OBJECTID)
								}
							}
						});
					});
			}
		}


		viewer.camera.flyTo({
			destination: Cesium.Cartesian3.fromDegrees(105.862212, 20.996529, 400),
			orientation: {
				heading: Cesium.Math.toRadians(0.0),
				pitch: Cesium.Math.toRadians(-15.0),
			}
		});
		const container = document.getElementById("cesiumContainer");
		const infoBox = document.createElement("div");
		infoBox.classList.add("custom-infobox");
		container.appendChild(infoBox);

		viewer.selectedEntityChanged.addEventListener(ent => {
			infoBox.classList.remove("open");
			if (ent.moTa) {
				if (ent.moTa.tenhokhoan || ent.moTa.TenMatCat) {
					infoBox.classList.add("open");
					if (ent.moTa.tenhokhoan) {
						infoBox.innerHTML = `
						<div class="gallery">
			<img src="http://localhost:4320/img/${ent.moTa.tenhokhoan}.jpg"
				width="200" />
		</div>
				
				<table class="table table-dark table-striped" style="margin: 0;margin-top: 8px;width: 400px;">
					<tbody>
						<tr>
							<th>Tên hố khoan</th>
							<td style="text-align: right;">${ent.moTa.tenhokhoan}</td>
						</tr>
						<tr>
							<th>Loại cấu trúc nền</th>
							<td style="text-align: right;">${ent.moTa.loaicautru}</td>
						</tr>
					</tbody>
				</table>`;
						setTimeout(() => {
							reloadScript();
							console.log('đã xong');
						}, 5000);
					}
					if (ent.moTa.TenMatCat) {
						infoBox.innerHTML = `
						<div class="gallery">
			<img src="http://localhost:4320/img/${ent.moTa.MaMatCat}.jpg"
				width="200" />
		</div>
				<table class="table table-dark table-striped" style="margin: 0;margin-top: 8px;width: 400px;">
					<tbody>
						<tr>
							<th>Mã mặt cắt</th>
							<td style="text-align: right;">${ent.moTa.MaMatCat}</td>
						</tr>
						<tr>
							<th>Tên mặt cắt</th>
							<td style="text-align: right;">${ent.moTa.TenMatCat}</td>
						</tr>
					</tbody>
				</table>`;
						setTimeout(() => {
							reloadScript();
							console.log('đã xong');
						}, 5000);
					}

				} else {
					infoBox.classList.add("open");
					var html = ''
					for (const iterator in ent.moTa) {
						if (iterator != 'geom') {
							html += `<tr>
							<th>${iterator}</th>
							<td style="text-align: right;">${ent.moTa[iterator]}</td>
						</tr>`
						}
					}
					infoBox.innerHTML = `
				<table class="table table-dark table-striped" style="margin: 0;margin-top: 8px;width: 400px;">
					<tbody>
						${html}
					</tbody>
				</table>`;
				}
			} else {
				infoBox.classList.remove("open");
			}

		});
		btHoKhoan({ checked: true });
		btMatCat({ checked: true });
		function reloadScript() {
			with (document) {
				var newscr = createElement('script');
				newscr.id = 'reloadMe';
				newscr.appendChild(createTextNode(getElementById('reloadMe').innerHTML));
				body.removeChild(getElementById('reloadMe'));
				body.appendChild(newscr);
			}
		}

	</script>
	<script type="text/javascript" id="reloadMe">
		var gallery_info = { imgs: [], currentIndex: 0 }, gallery_counter, gallery_buttons;


		function id(id) {
			return document.getElementById(id);
		}


		function displayImg(src) {
			// actually displays the image
			id("enlarged-image").src = src;


			// update counter if applicable
			if (gallery_info.imgs.length > 1) {
				// set the counter
				gallery_counter.innerHTML = (parseInt(gallery_info.currentIndex) + 1) + "/" + gallery_info.imgs.length;

				// show buttons
				for (var i = 0; i < gallery_buttons.length; i++) {
					gallery_buttons[i].classList.remove("hidden");
				}
			}
			else {
				// hide buttons if theres only 1 image
				for (var i = 0; i < gallery_buttons.length; i++) {
					gallery_buttons[i].classList.add("hidden");
				}
			}

		}


		function enlargeImg(srcImg) {

			// store metadata
			if (srcImg.getAttribute("data-gallery-index") != null) {
				// if it's a gallery with multiple linked images
				var allImgs = srcImg.parentNode.getElementsByTagName("img");

				gallery_info.currentIndex = srcImg.getAttribute("data-gallery-index");
				gallery_info.imgs = allImgs;
			}
			else {
				// if it's a single image
				gallery_info.currentIndex = 0;
				gallery_info.imgs = [srcImg];
			}


			// Actually enlarge the image
			var large_src = srcImg.src;

			// if an alternate SRC is supplied, use this instead
			if (srcImg.getAttribute("data-large-src") != null) {
				large_src = srcImg.getAttribute("data-large-src");
			}

			displayImg(large_src);
			id("enlarged-image").parentNode.classList.add("open");
		}


		function unenlargeImg() {
			// Close
			id("enlarged-image").parentNode.classList.remove("open");

			gallery_counter.innerHTML = "1/1";
		}


		function nextImage() {
			// Loads the next image in line
			var src = "";


			// change index
			if (gallery_info.currentIndex + 1 >= gallery_info.imgs.length) {
				// if at the end of the queue
				gallery_info.currentIndex = 0;
			}
			else {
				// if not at end of queue
				gallery_info.currentIndex = parseInt(gallery_info.currentIndex) + 1;
			}


			// if alt SRC supplied, use this
			if (gallery_info.imgs[gallery_info.currentIndex].getAttribute("data-large-src") != null) {
				src = gallery_info.imgs[gallery_info.currentIndex].getAttribute("data-large-src");
			}
			// otherwise, use the src from the img tag
			else {
				src = gallery_info.imgs[gallery_info.currentIndex].src;
			}


			// display image
			displayImg(src);
		}


		function prevImage() {
			// Loads the next image in line
			var src = "";


			// change index
			if (gallery_info.currentIndex <= 0) {
				// if at the end of the queue
				gallery_info.currentIndex = gallery_info.imgs.length - 1;
			}

			else {
				// if not at end of queue
				gallery_info.currentIndex = parseInt(gallery_info.currentIndex) - 1;
			}


			// if alt SRC supplied, use this
			if (gallery_info.imgs[gallery_info.currentIndex].getAttribute("data-large-src") != null) {
				src = gallery_info.imgs[gallery_info.currentIndex].getAttribute("data-large-src");
			}
			// otherwise, use the src from the img tag
			else {
				src = gallery_info.imgs[gallery_info.currentIndex].src;
			}


			// display image
			displayImg(src);
		}


		function initialise() {
			// Set up event listeners
			// In a separate function in case u need to call it after page load
			var galleries = document.getElementsByClassName("gallery");


			for (var x = 0; x < galleries.length; x++) {
				// for each gallery
				var gallery = galleries[x].children;

				for (var i = 0; i < gallery.length; i++) {
					// for each image, add a click listener
					if (gallery[i].src != "") {
						let src = gallery[i].src;

						gallery[i].onclick = function () {
							enlargeImg(this);
						}
					}

				}
			}

		}


		window.addEventListener("load", function () {

			initialise();


			// Set up big img element
			var el = document.createElement("div"), prevBtn = document.createElement("div"), nextBtn = document.createElement("div"), counter = document.createElement("span");


			// image
			el.innerHTML = "<img class='img-enlarged' id='enlarged-image' />";
			el.classList.add("img-enlarged__cont");
			el.onclick = function () {
				unenlargeImg();
			}


			// prev / next buttons
			prevBtn.innerHTML = "<span></span>";
			prevBtn.classList.add("img-enlarged__nav");
			prevBtn.classList.add("prev");
			prevBtn.onclick = function (event) {
				event.stopPropagation();
				prevImage();
			}

			nextBtn.innerHTML = "<span></span>";
			nextBtn.classList.add("img-enlarged__nav");
			nextBtn.classList.add("next");
			nextBtn.onclick = function (event) {
				event.stopPropagation();
				nextImage();
			}


			// counter
			counter.innerHTML = "1/1";
			counter.classList.add("img-enlarged__counter");
			counter.classList.add("nosel");


			el.appendChild(prevBtn);
			el.appendChild(counter);
			el.appendChild(nextBtn);
			document.body.appendChild(el);

			gallery_counter = counter;
			gallery_buttons = [prevBtn, nextBtn];

		});
	</script>
	</div>
</body>

</html>
<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="utf-8">
	<title>3D</title>

	<!-- Include the CesiumJS JavaScript and CSS files -->
	<script src="https://cesium.com/downloads/cesiumjs/releases/1.101/Build/Cesium/Cesium.js"></script>
	<link href="https://cesium.com/downloads/cesiumjs/releases/1.101/Build/Cesium/Widgets/widgets.css" rel="stylesheet">
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet"
		integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">

</head>
<style>
	html,
	body,
	#cesiumContainer {
		width: 100%;
		height: 100%;
		margin: 0;
		padding: 0;
		overflow: hidden;
	}

	#toolbar {
		position: absolute;
		top: 20px;
		left: 20px;
		background: rgba(42, 42, 42, 0.8);
		/* padding: 8px; */
		border-radius: 4px;
	}

	#toolbar .header {
		font-weight: bold;
		padding-top: 5px;
		padding-bottom: 5px;
	}

	#toolbar td {
		color: aliceblue;
	}

	#chuGiaiLopHoKhoan {
		position: absolute;
		bottom: 35px;
		right: 20px;
		background: rgba(42, 42, 42, 0.8);
		/* padding: 8px; */
		border-radius: 4px;
	}

	.custom-infobox {
		display: none;
		position: absolute;
		right: 24px;
		top: 64px;
		border-radius: 4px;
		padding: 8px;
		background: #2e2f30;
		pointer-events: none;
	}

	.custom-infobox.open {
		display: block;
	}
</style>

<body>
	<div id="cesiumContainer"></div>
	<div id="toolbar">
		<div class="accordion" id="chuGiaiLopBanDo" style="--bs-accordion-bg: rgba(42, 42, 42, 0.1)">
			<div class="accordion-item">
				<h2 class="accordion-header" id="headingThreeChuGiaiLopBanDo">
					<button class="accordion-button" type="button" data-bs-toggle="collapse"
						data-bs-target="#collChuGiaiLopBanDo" aria-expanded="false" aria-controls="collChuGiaiLopBanDo"
						style="color: #fff;background-color:  rgba(42, 42, 42, 0.1);">
						Lớp bản đồ
					</button>
				</h2>
				<div id="collChuGiaiLopBanDo" class="accordion-collapse collapse show"
					aria-labelledby="headingThreeChuGiaiLopBanDo" data-bs-parent="#chuGiaiLopBanDo">
					<div class="accordion-body">
						<div>
							<h3 class="text-gray-800 fw-bold" style="font-size: 16px;
							margin: 0;
							color: #fff;margin-bottom: 4px;">Hành chính</h3>
							<div class="d-flex flex-row m-2 align-items-center">
								<input class="form-check-input" style="margin: 0 !important;" type="checkbox"
									onclick="btQuanHuyenHN(this)">
								<div style="
										  height: 20px;
										  width: 20px;
										  border: 1px solid #ffc700;
										  background-color: #ffc70020;
										margin-left: 8px;
										margin-right: 8px;
										"></div>
								<span class="form-check-label" style="color: #fff;font-size: 14px;">Quận huyện Hà
									Nội</span>
							</div>
							<div class="d-flex flex-row m-2 align-items-center">
								<input class="form-check-input" style="margin: 0 !important;" type="checkbox"
									onclick="btPhuongXa(this)">
								<div style="
										  height: 20px;
										  width: 20px;
										  border: 1px solid #7fffd4;
										  background-color: #7fffd420;
										margin-left: 8px;
										margin-right: 8px;
										"></div>
								<span class="form-check-label" style="color: #fff;font-size: 14px;">Phường xã</span>
							</div>
							<!-- <div class="d-flex flex-row m-2 align-items-center">
								<input class="form-check-input" style="margin: 0 !important;" type="checkbox"
									onclick="btVungNghienCuu(this)">
								<div style="
										  height: 20px;
										  width: 20px;
										  border: 1px solid #deb887;
										  background-color: #deb88720;
										margin-left: 8px;
										margin-right: 8px;
										"></div>
								<span class="form-check-label" style="color: #fff;font-size: 14px;">Vùng nghiên
									cứu</span>
							</div> -->
						</div>
						<div>
							<h3 class="text-gray-800 fw-bold" style="font-size: 16px;
							margin: 0;
							color: #fff;margin-bottom: 4px;">Công trình mặt</h3>
							<div class="d-flex flex-row m-2 align-items-center">
								<input class="form-check-input" style="margin: 0 !important;" type="checkbox"
									onclick="btCau(this)">
								<div style="
									height: 2px;
									width: 20px;
									background-color: #f8e71c;
									margin-left: 8px;
									transform: rotate(120deg);
								 "></div>
								<span class="form-check-label" style="color: #fff;font-size: 14px;">Cầu</span>
							</div>
							<div class="d-flex flex-row m-2 align-items-center">
								<input class="form-check-input" style="margin: 0 !important;" type="checkbox"
									onclick="btCongTrinhCoTangHam(this)">
								<div style="
										  height: 20px;
										  width: 20px;
										  border: 1px solid #3699ff;
										  background-color: #3699ff;
										margin-left: 8px;
										margin-right: 8px;
										"></div>
								<span class="form-check-label" style="color: #fff;font-size: 14px;">Nhà cao tầng</span>
							</div>
						</div>
						<div>
							<h3 class="text-gray-800 fw-bold" style="font-size: 16px;
							margin: 0;
							color: #fff;margin-bottom: 4px;">Công trình ngầm</h3>
							<div class="d-flex flex-row m-2 align-items-center">
								<div style="margin-left: 16px;">
									<p style="font-size: 16px;
									margin: 0;
									color: #fff;margin-bottom: 4px;">Công trình giao thông ngầm</p>
								</div>
							</div>
							<div class="d-flex flex-row m-2 align-items-center">
								<div style="margin-left: 16px;">
									<p style="font-size: 16px;
									margin: 0;
									color: #fff;margin-bottom: 4px;">Công trình hạ tầng kỹ thuật ngầm</h3>
									<div class="d-flex flex-row m-2 align-items-center">
										<input class="form-check-input" style="margin: 0 !important;" type="checkbox"
											onclick="btFanceHaNoi(this)">
										<div style="
											height: 2px;
											width: 20px;
											background-color: #8b865f;
											margin-left: 8px;
											transform: rotate(120deg);
										 "></div>
										<span class="form-check-label" style="color: #fff;font-size: 14px;">Đường ống
											nước</span>
									</div>
									<div class="d-flex flex-row m-2 align-items-center">
										<input class="form-check-input" style="margin: 0 !important;" type="checkbox"
											onclick="btCongBeKyThuat(this)">
										<div style="
											height: 2px;
											width: 20px;
											background-color: #ff8c00;
											margin-left: 8px;
											transform: rotate(120deg);
										 "></div>
										<span class="form-check-label" style="color: #fff;font-size: 14px;">Tuynel cống
											bể kỹ thuật</span>
									</div>
								</div>
							</div>
							<div class="d-flex flex-row m-2 align-items-center">
								<div style="margin-left: 16px;">
									<p style="font-size: 16px;
									margin: 0;
									color: #fff;margin-bottom: 4px;">Công trình công cộng ngầm</h3>
								</div>
							</div>
							<div class="d-flex flex-row m-2 align-items-center">
								<div style="margin-left: 16px;">
									<p style="font-size: 16px;
									margin: 0;
									color: #fff;margin-bottom: 4px;">Phần ngầm công trình xây dựng</h3>
									<div class="d-flex flex-row m-2 align-items-center">
										<input class="form-check-input" style="margin: 0 !important;" type="checkbox"
											onclick="btTangHam(this)">
										<div style="
												  height: 20px;
												  width: 20px;
												  border: 1px solid pink;
												  background-color: pink;
												margin-left: 8px;
												margin-right: 8px;
												"></div>
										<span class="form-check-label" style="color: #fff;font-size: 14px;">Tầng hầm các
											công trình xây dựng</span>
									</div>
									<div class="d-flex flex-row m-2 align-items-center">
										<input class="form-check-input" style="margin: 0 !important;" type="checkbox"
											onclick="btCocKhoanNhoi(this)">
										<div style="
												  height: 20px;
												  width: 20px;
												  border: 1px solid #702af7;
												  background-color: #702af7;
												margin-left: 8px;
												margin-right: 8px;
												border-radius: 4px;
												"></div>
										<span class="form-check-label" style="color: #fff;font-size: 14px;">Cọc khoan
											nhồi</span>
									</div>
								</div>
							</div>
						</div>
						<div>
							<h3 class="text-gray-800 fw-bold" style="font-size: 16px;
							margin: 0;
							color: #fff;margin-bottom: 4px;">Cấu trúc nền</h3>
							<div class="d-flex flex-row m-2 align-items-center">
								<input class="form-check-input" style="margin: 0 !important;" type="checkbox"
									onclick="btCauTrucNen(this)">
								<div style="
										  height: 20px;
										  width: 20px;
										  border: 1px solid #2f4f4f;
										  background-color: #2f4f4f;
										margin-left: 8px;
										margin-right: 8px;
										border-radius: 4px;
										"></div>
								<span class="form-check-label" style="color: #fff;font-size: 14px;">Bản đồ cấu trúc
									nền</span>
							</div>
							<div class="d-flex flex-row m-2 align-items-center">
								<input class="form-check-input" style="margin: 0 !important;" type="checkbox"
									onclick="btHoKhoan(this)" checked>
								<div style="
										  height: 20px;
										  width: 20px;
										  border: 1px solid #FFA800;
										  background-color: #FFA800;
										margin-left: 8px;
										margin-right: 8px;
										border-radius: 4px;
										"></div>
								<span class="form-check-label" style="color: #fff;font-size: 14px;">Hố khoan</span>
							</div>
							<div class="d-flex flex-row m-2 align-items-center">
								<input class="form-check-input" style="margin: 0 !important;" type="checkbox"
									onclick="btMatCat(this)" checked>
								<div style="
										  height: 20px;
										  width: 20px;
										  border: 1px solid #B8E986;
										  background-color: #B8E986;
										margin-left: 8px;
										margin-right: 8px;
										border-radius: 4px;
										"></div>
								<span class="form-check-label" style="color: #fff;font-size: 14px;">Mặt cắt</span>
							</div>
							<div class="d-flex flex-row m-2 align-items-center">
								<input class="form-check-input" style="margin: 0 !important;" type="checkbox"
									onclick="bt3DMC3(this)">
								<div>
									<div style="
										height: 4px;
										width: 20px;
										background-color: #a97400;
										margin-left: 8px;
										margin-right: 8px;
										"></div>
									<div style="
										height: 4px;
										width: 20px;
										background-color: #a0fce9;
										margin-left: 8px;
										margin-right: 8px;
										"></div>
									<div style="
										height: 4px;
										width: 20px;
										background-color: #8d9cfc;
										margin-left: 8px;
										margin-right: 8px;
										"></div>
									<div style="
										height: 4px;
										width: 20px;
										background-color: #ffee60;
										margin-left: 8px;
										margin-right: 8px;
										"></div>
									<div style="
										height: 4px;
										width: 20px;
										background-color: #306200;
										margin-left: 8px;
										margin-right: 8px;
										"></div>
								</div>
								<span class="form-check-label" style="color: #fff;font-size: 14px;">Mặt cắt 3D</span>
							</div>
						</div>
						<table style="margin-top: 4px;">
							<tbody>
								<tr>
									<td style="font-weight: 700;">Độ mờ bản đồ nền</td>
									<td>
										<input type="range" min="0.0" max="1.0" step="0.1"
											data-bind="value: alpha, valueUpdate: 'input'" style="margin-top: 12px;
											width: 100px;
											margin-left: 20px;">
									</td>
								</tr>
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>
	<a href="http://14.248.94.155:23112/2d" class="d-flex justify-content-center"
		style="padding: 3px;background-color: burlywood;border-radius: 4px;position: absolute;right: 84px;top: 7px;text-decoration: none;color: aliceblue;font-weight: 600;width: 32px;border: 1px solid #303336;">2D</a>
	<div id="chuGiaiLopHoKhoan" class="d-flex flex-column justify-content-center align-items-center">
		<div class="accordion" id="accordionExample" style="--bs-accordion-bg: rgba(42, 42, 42, 0.1)">
			<div class="accordion-item">
				<h2 class="accordion-header" id="headingThree">
					<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
						data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree"
						style="color: #fff;background-color:  rgba(42, 42, 42, 0.1);">
						Cột địa tầng
					</button>
				</h2>
				<div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree"
					data-bs-parent="#accordionExample">
					<div class="accordion-body">
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #86d3bb;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								1
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Bùn
								đáy
								hồ</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #72c4a9;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								2
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Cát lòng
								sông, bãi bồi di động ven sông</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #58b596;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								3
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Bùn
								Sét pha - cát pha bãi bồi thấp, trạng thái dẻo mềm - dẻo cứng</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #44aa89;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								4
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Sét -
								sét pha xen kẹp cát pha màu nâu gụ</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #52b092;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								5
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Sét, sét
								pha màu nâu vàng, trạng thái dẻo cứng, dẻo mềm</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #9cb075;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								6
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Sét pha
								màu nâu xám, trạng thái dẻo chảy lẫn ít hữu cơ</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #6d863d;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								7
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Sét pha
								xen kẹp cát pha màu nâu xám</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #627835;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								8
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Cát hạt
								nhỏ, hạt mịn, hạt bụi màu xám xanh, trạng thái chặt vừa</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #5b6f30;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								9
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Sét pha
								màu nâu xám, dẻo mềm, có chỗ xen kẹp cát pha, cát</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #53672b;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								10
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Sét màu
								xám xanh, trạng thái dẻo mềm - dẻo cứng</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #c98b5d;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								11
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Bùn sét
								màu xám đen lẫn hữu cơ</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #ea8c40;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								12
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Sét, sét
								pha màu nâu vàng, xám trắng, loang lổ, có lẫn kết von, trạng thái nửa cứng, dẻo cứng</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #c87330;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								13
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Sét pha
								màu xám đen lẫn hữu cơ, trạng thái dẻo chảy, chảy</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #a7551a;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								14
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Cát pha
								xen kẹp sét pha, màu xám vàng, trạng thái dẻo</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #a8612e;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								15
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Cát hạt
								nhỏ màu nâu vàng</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #959297;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								16
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Cát hạt
								trung lẫn sạn, sỏi màu xám vàng, xám trắng</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #4d7cb5;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								17
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Bùn
								đáy
								hồ</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #3a618f;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								18
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Cuội sỏi
								lẫn cát sét màu xám, xám vàng</P>
						</div>
						<div class="d-flex flex-row align-items-center">
							<div style="width: 20px;height: 20px;background-color: #284569;font-size: 10px;font-weight: 500;color: #fff;"
								class="d-flex justify-content-center align-items-center">
								19
							</div>
							<P style="font-size: 10px;font-weight: 500;color: #fff;margin: 0;margin-left: 4px;">Cuội sỏi
								lẫn cát, cát pha, sét màu xám ghi, xám nâu đôi chỗ lẫn sạn sỏi</P>
						</div>

					</div>
				</div>
			</div>

		</div>
	</div>
	<script type="text/javascript" src="./Sandcastle-header.js"></script>

	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"
		integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN"
		crossorigin="anonymous"></script>

	<script>
		function OpenStreetMapNominatimGeocoder() { }
		var cauTrucNenString = `<%= results.cauTrucNen ? JSON.stringify(results.cauTrucNen) : "{}" %>`
		var cauTrucNen = JSON.parse(cauTrucNenString.replace(/&#34;/g, '"'));
		var loKhoanString = `<%= results.loKhoan ? JSON.stringify(results.loKhoan) : "{}" %>`
		var loKhoan = JSON.parse(loKhoanString.replace(/&#34;/g, '"'));
		var quanHuyenString = `<%= results.quanHuyen ? JSON.stringify(results.quanHuyen) : "{}" %>`
		var quanHuyen = JSON.parse(quanHuyenString.replace(/&#34;/g, '"'));
		var phuongXaString = `<%= results.phuongXa ? JSON.stringify(results.phuongXa) : "{}" %>`
		var phuongXa = JSON.parse(phuongXaString.replace(/&#34;/g, '"'));
		var vungNghienCuuString = `<%= results.vungNghienCuu ? JSON.stringify(results.vungNghienCuu) : "{}" %>`
		var vungNghienCuu = JSON.parse(vungNghienCuuString.replace(/&#34;/g, '"'));
		var cocKhoanNhoiString = `<%= results.cocKhoanNhoi ? JSON.stringify(results.cocKhoanNhoi) : "{}" %>`;
		var cocKhoanNhoi = JSON.parse(cocKhoanNhoiString.replace(/&#34;/g, '"'));
		var cocKhoanNhoiToaCuTheString = `<%= results.cocKhoanNhoiToaCuThe ? JSON.stringify(results.cocKhoanNhoiToaCuThe) : "{}" %>`
		var cocKhoanNhoiToaCuThe = JSON.parse(cocKhoanNhoiToaCuTheString.replace(/&#34;/g, '"'));
		// console.log(duongOngCapNuoc);
		Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI2NjFhMzBjOS02YThlLTQ4YjQtYTJlZC1mZjk0ZjJlYjkwNjUiLCJpZCI6NDY0NTEsImlhdCI6MTYxNjE1MjE1OX0.yKaMQt5T-0bNJ2yj-m16X8oYNOIxQTDj6qTu7prxr9U';
		// var extent = Cesium.Rectangle.fromDegrees(105.862212, 20.996529, 105.862212, 20.996529);
		// Cesium.Camera.DEFAULT_VIEW_RECTANGLE = extent;
		// Cesium.Camera.DEFAULT_VIEW_FACTOR = 0;


		OpenStreetMapNominatimGeocoder.prototype.geocode = function (input) {
			const endpoint = "http://localhost:4320/searchQ";
			const resource = new Cesium.Resource({
				url: endpoint,
				queryParameters: {
					format: "json",
					q: input,
				},
			});

			return resource.fetchJson().then(function (results) {
				let bboxDegrees;
				return results.map(function (resultObject) {
					bboxDegrees = typeof resultObject.boundingbox.coordinates[0] == "object" ? resultObject.boundingbox.coordinates[0][0] : resultObject.boundingbox.coordinates;
					return {
						displayName: resultObject.display_name,
						destination: Cesium.Rectangle.fromDegrees(
							bboxDegrees[0],
							bboxDegrees[1],
							bboxDegrees[0],
							bboxDegrees[1],
						),
					};
				});
			});
		};
		const viewer = new Cesium.Viewer('cesiumContainer', {
			terrainProvider: Cesium.createWorldTerrain(),
			geocoder: new OpenStreetMapNominatimGeocoder(),
			infoBox: false
		});
		viewer.homeButton.viewModel.command.beforeExecute.addEventListener(
			function (e) {
				e.cancel = true;
				viewer.scene.camera.flyTo({
					destination: Cesium.Cartesian3.fromDegrees(105.853132, 20.995836, 400),
					orientation: {
						heading: Cesium.Math.toRadians(0.0),
						pitch: Cesium.Math.toRadians(-15.0),
					}
				});
			});
		var camera = viewer.camera;
		const scene = viewer.scene;
		const globe = scene.globe;
		var ellipsoid = Cesium.Ellipsoid.WGS84;
		var geodesic = new Cesium.EllipsoidGeodesic();

		scene.screenSpaceCameraController.enableCollisionDetection = false;
		globe.translucency.frontFaceAlphaByDistance = new Cesium.NearFarScalar(
			400.0,
			0.0,
			800.0,
			1.0
		);

		const CapNuocUnDer = viewer.scene.primitives.add(
			new Cesium.Cesium3DTileset({
				url: Cesium.IonResource.fromAssetId(1478626)
			})
		);
		const CAPNUOC = viewer.scene.primitives.add(
			new Cesium.Cesium3DTileset({
				url: Cesium.IonResource.fromAssetId(1478625)
			})
		);
		const entities = viewer.entities;
		const boxes = entities.add(new Cesium.Entity());
		const parentLayerDuongOngThoatNuoc = entities.add(new Cesium.Entity());
		const parentLayerDuongOngCapNuoc = entities.add(new Cesium.Entity());
		const parentLayerCongTrinhCoTangHam = entities.add(new Cesium.Entity());
		const parentLayerCocKhoanNhoi = entities.add(new Cesium.Entity());
		const parentLayerCongBeKyThuat = entities.add(new Cesium.Entity());

		const parentLayerCocKhoanNhoiToaCuThe = entities.add(new Cesium.Entity());



		function computeCircle(radius) {
			const positions = [];
			for (let i = 0; i < 360; i++) {
				const radians = Cesium.Math.toRadians(i);
				positions.push(
					new Cesium.Cartesian2(
						radius * Math.cos(radians),
						radius * Math.sin(radians)
					)
				);
			}
			return positions;
		}

		const tachKichCoDuongOng1 = (data) => {
			var cd = '';
			for (let index = 0; index < data.length; index++) {
				if (data[index] == 'x') {
					cd = data.slice(0, index - 1);
					break;
				}
			}
			return parseInt(cd);
		}

		const tachKichCoDuongOng2 = (data) => {
			var cr = '';
			for (let index = 0; index < data.length; index++) {
				if (data[index] == 'x') {
					cr = data.slice(-(index - 1), data.length);
					break;
				}
			}
			return parseInt(cr);
		}

		const lapDuongOngCapNuoc = (element) => {
			var fromDegreesArrayLayerDuongOngThoatNuoc = [];
			element.geometry.coordinates.forEach(e => {
				e.forEach(el => {
					fromDegreesArrayLayerDuongOngThoatNuoc.push(el[0]);
					fromDegreesArrayLayerDuongOngThoatNuoc.push(el[1]);
					// console.log(typeof element.properties.chieusauch, -element.properties.chieusauch / 100);
					if (typeof element.properties.ChieuSauCh == "number") {
						fromDegreesArrayLayerDuongOngThoatNuoc.push(-10 + parseFloat((-element.properties.ChieuSauCh / 100).toFixed(1)));
					} else {
						fromDegreesArrayLayerDuongOngThoatNuoc.push(-10 + parseFloat((-parseFloat(element.properties.ChieuSauCh) / 100).toFixed(1)));
					}
				});
			});
			return fromDegreesArrayLayerDuongOngThoatNuoc
		}
		const lapDuongOngThoatNuoc = (element) => {
			var fromDegreesArrayLayerDuongOngThoatNuoc = [];
			element.geometry.coordinates.forEach(e => {
				e.forEach(el => {
					fromDegreesArrayLayerDuongOngThoatNuoc.push(el[0]);
					fromDegreesArrayLayerDuongOngThoatNuoc.push(el[1]);
					// console.log(typeof element.properties.chieusauch, -element.properties.chieusauch / 100);
					if (typeof element.properties.ChieuSauDa == "number") {
						fromDegreesArrayLayerDuongOngThoatNuoc.push(-10 + parseFloat((-element.properties.ChieuSauDa / 100).toFixed(1)));
					} else {
						fromDegreesArrayLayerDuongOngThoatNuoc.push(-10 + parseFloat((-parseFloat(element.properties.ChieuSauDa) / 100).toFixed(1)));
					}
				});
			});
			return fromDegreesArrayLayerDuongOngThoatNuoc
		}

		var loKhoanSource = new Cesium.GeoJsonDataSource();
		var cocKhoanNhoiSource = new Cesium.GeoJsonDataSource();
		var cocKhoanNhoiToaCuTheSource = new Cesium.GeoJsonDataSource();
		var quanHuyenSource = new Cesium.GeoJsonDataSource();
		var phuongXaSource = new Cesium.GeoJsonDataSource();
		var vungNghienCuuSource = new Cesium.GeoJsonDataSource();
		var cauTrucNenSource = new Cesium.GeoJsonDataSource();
		var matCatSource = new Cesium.GeoJsonDataSource();
		var tangHamSource = new Cesium.GeoJsonDataSource();
		var nhaCaoTangSource = new Cesium.GeoJsonDataSource();
		var cauSource = new Cesium.GeoJsonDataSource();

		// if (!viewer.dataSources.contains(tangHamSource)) {
		// 	viewer.dataSources.add(tangHamSource);
		// }




		// duongOngNuoc.features.forEach(element => {
		// 	if (element.geometry) {
		// 		// console.log(element.properties.duongkinho);
		// 		if (element.properties.kichthuoc.indexOf('x') == -1) {
		// 			entities.add({
		// 				parent: parentLayerDuongOngThoatNuoc,
		// 				name: element.properties.matuyentho,
		// 				polylineVolume: {
		// 					positions: Cesium.Cartesian3.fromDegreesArrayHeights(lapDuongOng(element)),
		// 					shape: computeCircle(parseInt(element.properties.kichthuoc) / 1000),
		// 					material: Cesium.Color.RED,
		// 				},
		// 			});
		// 		} else {
		// 			entities.add({
		// 				parent: parentLayerDuongOngThoatNuoc,
		// 				name: element.properties.matuyentho,
		// 				polylineVolume: {
		// 					positions: Cesium.Cartesian3.fromDegreesArrayHeights(lapDuongOng(element)),
		// 					shape: [
		// 						new Cesium.Cartesian2(-tachKichCoDuongOng1(element.properties.kichthuoc) / 1000, -tachKichCoDuongOng2(element.properties.kichthuoc) / 1000),
		// 						new Cesium.Cartesian2(tachKichCoDuongOng1(element.properties.kichthuoc) / 1000, -tachKichCoDuongOng2(element.properties.kichthuoc) / 1000),
		// 						new Cesium.Cartesian2(tachKichCoDuongOng1(element.properties.kichthuoc) / 1000, tachKichCoDuongOng2(element.properties.kichthuoc) / 1000),
		// 						new Cesium.Cartesian2(-tachKichCoDuongOng1(element.properties.kichthuoc) / 1000, tachKichCoDuongOng2(element.properties.kichthuoc) / 1000),
		// 					],
		// 					cornerType: Cesium.CornerType.BEVELED,
		// 					material: Cesium.Color.RED,
		// 				},
		// 			});
		// 		}
		// 	}
		// });





		// duongOngCapNuoc.features.forEach(element => {
		// 	if (element.geometry) {
		// 		if (element.properties.duongkinho.indexOf('x') == -1) {
		// 			entities.add({
		// 				parent: parentLayerDuongOngCapNuoc,
		// 				name: element.properties.maduongong,
		// 				polylineVolume: {
		// 					positions: Cesium.Cartesian3.fromDegreesArrayHeights(lapDuongOng(element)),
		// 					shape: computeCircle(600 / 1000),
		// 					material: Cesium.Color.BLUE,
		// 				},
		// 			});
		// 		} else {
		// 			entities.add({
		// 				parent: parentLayerDuongOngCapNuoc,
		// 				name: element.properties.maduongong,
		// 				polylineVolume: {
		// 					positions: Cesium.Cartesian3.fromDegreesArrayHeights(lapDuongOng(element)),
		// 					shape: [
		// 						new Cesium.Cartesian2(-tachKichCoDuongOng1(element.properties.duongkinho) / 1000, -tachKichCoDuongOng2(element.properties.duongkinho) / 1000),
		// 						new Cesium.Cartesian2(tachKichCoDuongOng1(element.properties.duongkinho) / 1000, -tachKichCoDuongOng2(element.properties.duongkinho) / 1000),
		// 						new Cesium.Cartesian2(tachKichCoDuongOng1(element.properties.duongkinho) / 1000, tachKichCoDuongOng2(element.properties.duongkinho) / 1000),
		// 						new Cesium.Cartesian2(-tachKichCoDuongOng1(element.properties.duongkinho) / 1000, tachKichCoDuongOng2(element.properties.duongkinho) / 1000),
		// 					],
		// 					cornerType: Cesium.CornerType.BEVELED,
		// 					material: Cesium.Color.BLUE,
		// 				},
		// 			});
		// 		}
		// 	}
		// });

		const vm1 = {
			translucencyEnabled: true,
			fadeByDistance: true,
			showVectorData: false,
			alpha: 0.5,
		};

		Cesium.knockout.track(vm1);
		const toolbar = document.getElementById("toolbar");
		Cesium.knockout.applyBindings(vm1, toolbar);
		for (const name in vm1) {
			if (vm1.hasOwnProperty(name)) {
				Cesium.knockout.getObservable(vm1, name).subscribe(update);
			}
		}

		function update() {
			globe.translucency.enabled = vm1.translucencyEnabled;
			let alpha = Number(vm1.alpha);
			alpha = !isNaN(alpha) ? alpha : 1.0;
			alpha = Cesium.Math.clamp(alpha, 0.0, 1.0);
			globe.translucency.frontFaceAlphaByDistance.nearValue = alpha;
			globe.translucency.frontFaceAlphaByDistance.farValue = vm1.fadeByDistance
				? 1.0
				: alpha;

			// polygon.show = viewModel.showVectorData;
			// polyline.show = viewModel.showVectorData;
		}
		update();

		const btQuanHuyenHN = async (e) => {
			if (e.checked) {
				quanHuyenSource.load(quanHuyen, {
					stroke: Cesium.Color.YELLOW,
					fill: Cesium.Color.YELLOW.withAlpha(0.0),
					strokeWidth: 3,
				}).then((dataSource) => {
					const entities = dataSource.entities.values;
					for (let i = 0; i < entities.length; i++) {
						const entity = entities[i];
						entity.moTa = {
							'Quận/Huyện': entity.properties._name_2._value
						}
						entity.polygon.height =
							-15;
					}
				}).catch(function (error) {
					window.alert(error);
				});
				viewer.dataSources.add(quanHuyenSource)
			} else {
				viewer.dataSources.remove(quanHuyenSource)
			}
		}

		const btPhuongXa = async (e) => {
			if (e.checked) {
				phuongXaSource.load(phuongXa, {
					stroke: Cesium.Color.AQUAMARINE,
					fill: Cesium.Color.AQUAMARINE.withAlpha(0.0),
					strokeWidth: 3,
				}).then((dataSource) => {
					const entities = dataSource.entities.values;
					for (let i = 0; i < entities.length; i++) {
						const entity = entities[i];
						entity.moTa = {
							'Phường Xã': entity.properties._tenphuongx._value
						}
						entity.polygon.height =
							-15;
					}
				}).catch(function (error) {
					window.alert(error);
				});
				viewer.dataSources.add(phuongXaSource)
			} else {
				viewer.dataSources.remove(phuongXaSource)
			}
		}

		// const btVungNghienCuu = async (e) => {
		// 	if (e.checked) {
		// 		vungNghienCuuSource.load(vungNghienCuu, {
		// 			stroke: Cesium.Color.BURLYWOOD,
		// 			fill: Cesium.Color.BURLYWOOD.withAlpha(0.1),
		// 			strokeWidth: 3,
		// 		}).then((dataSource) => {
		// 			const entities = dataSource.entities.values;
		// 			for (let i = 0; i < entities.length; i++) {
		// 				const entity = entities[i];
		// 				entity.moTa = {
		// 					'Vùng nghiên cứu': 'Vùng nghiên cứu'
		// 				}
		// 				entity.polygon.height =
		// 					-15;
		// 			}
		// 		}).catch(function (error) {
		// 			window.alert(error);
		// 		});
		// 		viewer.dataSources.add(vungNghienCuuSource)
		// 	} else {
		// 		viewer.dataSources.remove(vungNghienCuuSource)
		// 	}
		// }

		const btCauTrucNen = async (e) => {
			if (e.checked) {
				cauTrucNenSource.load(cauTrucNen, {
					stroke: Cesium.Color.DARKSLATEGRAY,
					fill: Cesium.Color.DARKSLATEGRAY.withAlpha(0.1),
					strokeWidth: 3,
				}).then((dataSource) => {
					const entities = dataSource.entities.values;
					for (let i = 0; i < entities.length; i++) {
						const entity = entities[i];
						entity.moTa = {
							'Cấu trúc nền': entity.properties._dang._value
						}
						entity.polygon.height =
							-15;
					}
				}).catch(function (error) {
					window.alert(error);
				});
				viewer.dataSources.add(cauTrucNenSource)
			} else {
				viewer.dataSources.remove(cauTrucNenSource)
			}
		}


		const btMatCat = async (e) => {
			if (e.checked) {
				matCatSource.load("http://localhost:4320/uploads/geojson/mat_cat.geojson", {
					stroke: Cesium.Color.fromCssColorString('#B8E986'),
					strokeWidth: 3,
				}).then((dataSource) => {
					const entities = dataSource.entities.values;
					for (let i = 0; i < entities.length; i++) {
						const entity = entities[i];
						// console.log({
						// 	MaMatCat: entity.properties._MaMatCat._value,
						// 	TenMatCat: entity.properties._TenMatCat._value,
						// });
						entity.moTa = {
							MaMatCat: entity.properties._MaMatCat._value,
							TenMatCat: entity.properties._TenMatCat._value,
						}
						// entity.polygon.height = -15;
					}
				}).catch(function (error) {
					window.alert(error);
				});
				viewer.dataSources.add(matCatSource)
			} else {
				viewer.dataSources.remove(matCatSource)
			}
		}

		const btCau = async (e) => {
			if (e.checked) {
				cauSource.load("http://localhost:4320/uploads/geojson/Cau.geojson", {
					stroke: Cesium.Color.fromCssColorString('#f8e71c'),
					strokeWidth: 3,
				}).then((dataSource) => {
					const entities = dataSource.entities.values;
					for (let i = 0; i < entities.length; i++) {
						const entity = entities[i];
						// console.log({
						// 	MaMatCat: entity.properties._MaMatCat._value,
						// 	TenMatCat: entity.properties._TenMatCat._value,
						// });
						entity.moTa = {
							ma: entity.properties._ma._value,
						}
						// entity.polygon.height = -15;
					}
				}).catch(function (error) {
					window.alert(error);
				});
				viewer.dataSources.add(cauSource)
			} else {
				viewer.dataSources.remove(cauSource)
			}
		}

		const tinhDoSau = (obj, index) => {
			var a = obj.slice(0, index + 1);
			var doSau = obj[index].value;
			for (let i = 0; i < a.length; i++) {
				if (a[i].value != 0 && doSau > a[i].value) {
					doSau = doSau - a[i].value;
					break;
				}
			}
			return doSau;
		}

		const tinhSoVoiMatDat = (obj, index) => {
			var doSauSoVoiMatDat = 0;
			for (let i = 0; i < index - 1 + 1; i++) {
				doSauSoVoiMatDat = doSauSoVoiMatDat + tinhDoSau(obj, obj[i].index)
			}
			return -15 - (doSauSoVoiMatDat + obj[index].value / 2);
		}

		const btHoKhoan = async (e) => {
			if (e.checked) {
				loKhoanSource.load(loKhoan, {
					markerColor: Cesium.Color.fromCssColorString('#FFA800'),
					markerSize: 28
				})
				viewer.dataSources.add(loKhoanSource);
				loKhoan.features.forEach(element => {
					if (element.geometry) {
						var objectLop = [
							{ value: element.properties.bedaydatla, index: 0 },
							{ value: element.properties.bedaylop1, index: 1 },
							{ value: element.properties.bedaylop2, index: 2 },
							{ value: element.properties.bedaylop3, index: 3 },
							{ value: element.properties.bedaylop4, index: 4 },
							{ value: element.properties.bedaylop5, index: 5 },
							{ value: element.properties.bedaylop6, index: 6 },
							{ value: element.properties.bedaylop7, index: 7 },
							{ value: element.properties.bedaylop8, index: 8 },
							{ value: element.properties.bedaylop9, index: 9 },
							{ value: element.properties.bedaylop10, index: 10 },
							{ value: element.properties.bedaylop11, index: 11 },
							{ value: element.properties.bedaylop12, index: 12 },
							{ value: element.properties.bedaylop13, index: 13 },
							{ value: element.properties.bedaylop14, index: 14 },
							{ value: element.properties.bedaylop15, index: 15 },
							{ value: element.properties.bedaylop16, index: 16 },
							{ value: element.properties.bedaylop17, index: 17 },
							{ value: element.properties.bedaylop18, index: 18 },
							{ value: element.properties.bedaylop19, index: 19 },
						];

						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop1' + element.properties.tenhokhoan,
							name: 'bedaylop1',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], tinhSoVoiMatDat(objectLop, 1)),
							cylinder: {
								length: tinhDoSau(objectLop, 1),
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#86d3bb')
							},

						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop2' + element.properties.tenhokhoan,
							name: 'bedaylop2',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], tinhSoVoiMatDat(objectLop, 2)),
							cylinder: {
								length: tinhDoSau(objectLop, 2),
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#72c4a9')
							},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop3' + element.properties.tenhokhoan,
							name: 'bedaylop3',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], tinhSoVoiMatDat(objectLop, 3)),
							cylinder: {
								length: tinhDoSau(objectLop, 3),
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#58b596')
							},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop4' + element.properties.tenhokhoan,
							name: 'bedaylop4',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], tinhSoVoiMatDat(objectLop, 4)),
							cylinder: {
								length: tinhDoSau(objectLop, 4),
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#44aa89')
							},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop5' + element.properties.tenhokhoan,
							name: 'bedaylop5',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], tinhSoVoiMatDat(objectLop, 5)),
							cylinder: {
								length: tinhDoSau(objectLop, 5),
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#52b092')
							},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop6' + element.properties.tenhokhoan,
							name: 'bedaylop6',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], tinhSoVoiMatDat(objectLop, 6)),
							cylinder: {
								length: tinhDoSau(objectLop, 6),
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#9cb075')
							},
						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop7' + element.properties.tenhokhoan,
							name: 'bedaylop7',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], tinhSoVoiMatDat(objectLop, 7)),
							cylinder: {
								length: tinhDoSau(objectLop, 7),
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#6d863d')
							},
						});

						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop8' + element.properties.tenhokhoan,
							name: 'bedaylop8',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], tinhSoVoiMatDat(objectLop, 8)),
							cylinder: {
								length: tinhDoSau(objectLop, 8),
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#627835')
							},

						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop9' + element.properties.tenhokhoan,
							name: 'bedaylop9',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], tinhSoVoiMatDat(objectLop, 9)),
							cylinder: {
								length: tinhDoSau(objectLop, 9),
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#5b6f30')
							},

						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop10' + element.properties.tenhokhoan,
							name: 'bedaylop10',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], tinhSoVoiMatDat(objectLop, 10)),
							cylinder: {
								length: tinhDoSau(objectLop, 10),
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#53672b')
							},

						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop11' + element.properties.tenhokhoan,
							name: 'bedaylop11',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], tinhSoVoiMatDat(objectLop, 11)),
							cylinder: {
								length: tinhDoSau(objectLop, 11),
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#c98b5d'),
							},

						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop12' + element.properties.tenhokhoan,
							name: 'bedaylop12',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], tinhSoVoiMatDat(objectLop, 12)),
							cylinder: {
								length: tinhDoSau(objectLop, 12),
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#ea8c40'),
							},

						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop13' + element.properties.tenhokhoan,
							name: 'bedaylop13',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], tinhSoVoiMatDat(objectLop, 13)),
							cylinder: {
								length: tinhDoSau(objectLop, 13),
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#c87330'),
							},

						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop14' + element.properties.tenhokhoan,
							name: 'bedaylop14',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], tinhSoVoiMatDat(objectLop, 14)),
							cylinder: {
								length: tinhDoSau(objectLop, 14),
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#a7551a'),
							},

						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop15' + element.properties.tenhokhoan,
							name: 'bedaylop15',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], tinhSoVoiMatDat(objectLop, 15)),
							cylinder: {
								length: tinhDoSau(objectLop, 15),
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#a8612e'),
							},

						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop16' + element.properties.tenhokhoan,
							name: 'bedaylop16',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], tinhSoVoiMatDat(objectLop, 16)),
							cylinder: {
								length: tinhDoSau(objectLop, 16),
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#959297'),
							},

						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop17' + element.properties.tenhokhoan,
							name: 'bedaylop17',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], tinhSoVoiMatDat(objectLop, 17)),
							cylinder: {
								length: tinhDoSau(objectLop, 17),
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#4d7cb5'),
							},

						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop18' + element.properties.tenhokhoan,
							name: 'bedaylop18',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], tinhSoVoiMatDat(objectLop, 18)),
							cylinder: {
								length: tinhDoSau(objectLop, 18),
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#3a618f'),
							},

						});
						entities.add({
							moTa: element.properties,
							parent: boxes,
							id: 'bedaylop19' + element.properties.tenhokhoan,
							name: 'bedaylop19',
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], tinhSoVoiMatDat(objectLop, 19)),
							cylinder: {
								length: tinhDoSau(objectLop, 19),
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#284569'),
							},

						});
					} else {
						// console.log(element);

					}
				});
			} else {
				viewer.dataSources.remove(loKhoanSource)
				loKhoan.features.forEach(element => {
					if (element.geometry) {
						for (let index = 0; index < 19; index++) {
							entities.removeById('bedaylop' + JSON.stringify(index + 1) + element.properties.tenhokhoan);
						}
					}
				});
			}
		}

		const btCocKhoanNhoi = async (e) => {
			if (e.checked) {
				cocKhoanNhoiSource.load(cocKhoanNhoi, {
					markerColor: Cesium.Color.fromCssColorString('#702af7'),
					// markerColor: Cesium.Color.YELLOW,
					markerSize: 28
				})
				viewer.dataSources.add(cocKhoanNhoiSource);
				cocKhoanNhoi.features.forEach(element => {
					if (element.geometry) {
						entities.add({
							id: 'cocKhoanNhoi' + element.properties.gid,
							parent: parentLayerCocKhoanNhoi,
							name: 'cocKhoanNhoiName' + element.properties.gid,
							position: Cesium.Cartesian3.fromDegrees(element.geometry.coordinates[0], element.geometry.coordinates[1], -15 - (element.properties.cdcoc / 2) + element.properties.cdodaucoc),
							cylinder: {
								length: element.properties.cdcoc,
								topRadius: 1,
								bottomRadius: 1,
								material: Cesium.Color.fromCssColorString('#702af7')
							},
							moTa: {
								'Mã': element.properties.ma,
								'Tên gọi': element.properties.tengoi,
								'Quận Huyện': element.properties.quanHuyen,
								'Phường Xã': element.properties.phuongXa,
								'Chủ đầu tư': element.properties.chudautu,
								'Đơn vị cung cấp tài liệu': element.properties.dvccaptl,
								'Đơn vị quản lý tài liệu': element.properties.dvquanlytl,
								'Ngày nhập dữ liệu': element.properties.ngaynl,
								'Người nhập dữ liệu': element.properties.nguoinl,
								'Đường kính cọc': element.properties.dkcoc,
								'Chiều dài cọc': element.properties.cdcoc,
								'Chiều dài ở đầu cọc': element.properties.cdodaucoc,
								'Chiều dài ở đáy cọc': element.properties.cdodaycoc,
							}
						});
					}
				});
			} else {
				viewer.dataSources.remove(cocKhoanNhoiSource)
				cocKhoanNhoi.features.forEach(element => {
					if (element.geometry) {
						entities.removeById('cocKhoanNhoi' + element.properties.gid);
					}
				});
			}
		}

		const parentLayerTangHam = entities.add(new Cesium.Entity());

		const btTangHam = async (e) => {
			if (e.checked) {
				tangHamSource.load("http://localhost:4320/uploads/geojson/TangHamCCCongTrinhXayDung.geojson").then(function (dataSource) {
					const entities = dataSource.entities.values;
					const colorHash = {};
					for (let i = 0; i < entities.length; i++) {
						const entity = entities[i];
						entity.parent = parentLayerTangHam;
						entity.polygon.material = Cesium.Color.PINK;
						entity.polygon.outline = false;
						entity.polygon.extrudedHeight =
							- 15;
						entity.polygon.height =
							- 15 - (entity.properties.ccham * entity.properties.sotang);
						entity.id =
							'tangHamCongTrinhXayDung'
						entity.moTa = {
							"Tên gọi": entity.properties.tengoi,
							"Mã": entity.properties.ma,
							"Quận Huyện": entity.properties.quanhuyen,
							"Phường Xã": entity.properties.phuongxa,
							"Địa chỉ": entity.properties.diachi,
							"Tọa độ x": entity.properties.toadox,
							"Tọa độ y": entity.properties.toadoy,
							"Chủ đầu tư": entity.properties.chudautu,
							"Đơn vị cung cấp": entity.properties.dvccaptl,
							"Đơn vị quản lý tài liệu": entity.properties.dvquanlytl,
							"Ngày nhập dữ liệu": entity.properties.ngaynl,
							"Người nhập dữ liệu": entity.properties.nguoinl,
							"Chức năng": entity.properties.chucnang,
							"Số tầng": entity.properties.sotang,
							"Diện tích sàn": entity.properties.dtsan,
							"Kích thước mặt bằng": entity.properties.ktmatbang,
						}
					}
				})
					.catch(function (error) {
						window.alert(error);
					});
				viewer.dataSources.add(tangHamSource);

			} else {
				viewer.dataSources.remove(tangHamSource);

			}
		}


		const btCongTrinhCoTangHam = async (e) => {
			if (e.checked) {
				const promiseNhaCaoTang = Cesium.GeoJsonDataSource.load(
					"http://localhost:4320/uploads/geojson/NhaCaoTang.geojson"
				);
				tangHamSource.load("http://localhost:4320/uploads/geojson/NhaCaoTang.geojson")
					.then(function (dataSource) {
						const entities = dataSource.entities.values;
						const colorHash = {};
						for (let i = 0; i < entities.length; i++) {
							const entity = entities[i];
							entity.parent = parentLayerCongTrinhCoTangHam;
							entity.polygon.material = Cesium.Color.fromCssColorString('#3699ff');
							entity.polygon.outline = false;
							entity.polygon.extrudedHeight =
								- 15;
							entity.polygon.height =
								- 15 + entity.properties.sltangnoi * 4;
							entity.moTa = {
								"Mã công trình": entity.properties.ma,
								"Tên công trình": entity.properties.tengoi,
								"Quận Huyện": entity.properties.quanhuyen,
								"Phường Xã": entity.properties.phuongxa,
								"Diện tích": entity.properties.dtsan,
								"Loại móng": entity.properties.loaimong,
								"Cấp công trình": entity.properties.capct,
								"Số lượng tầng": entity.properties.sltangnoi,
								"Tên chủ sở hữu": entity.properties.chudautu,
								"Số lượng tầng hầm": entity.properties.sltangham,
							}
						}
					})
					.catch(function (error) {
						window.alert(error);
					});
				viewer.dataSources.add(tangHamSource);

			} else {
				viewer.dataSources.remove(tangHamSource);
			}
		}

		viewer.camera.flyTo({
			destination: Cesium.Cartesian3.fromDegrees(105.853132, 20.995836, 400),
			orientation: {
				heading: Cesium.Math.toRadians(0.0),
				pitch: Cesium.Math.toRadians(-15.0),
			}
		});
		const container = document.getElementById("cesiumContainer");
		const infoBox = document.createElement("div");
		infoBox.classList.add("custom-infobox");
		container.appendChild(infoBox);

		viewer.selectedEntityChanged.addEventListener(ent => {
			infoBox.classList.remove("open");
			if (ent.moTa) {
				if (ent.moTa.tenhokhoan || ent.moTa.TenMatCat) {
					infoBox.classList.add("open");
					if (ent.moTa.tenhokhoan) {
						infoBox.innerHTML = `
				<div class="text-center">
					<img src="http://localhost:4320/img/${ent.moTa.tenhokhoan}.jpg" style="max-width: 200px;">
				</div>
				<table class="table table-dark table-striped" style="margin: 0;margin-top: 8px;width: 400px;">
					<tbody>
						<tr>
							<th>Tên hố khoan</th>
							<td style="text-align: right;">${ent.moTa.tenhokhoan}</td>
						</tr>
						<tr>
							<th>Loại cấu trúc nền</th>
							<td style="text-align: right;">${ent.moTa.loaicautru}</td>
						</tr>
					</tbody>
				</table>`;
					}
					if (ent.moTa.TenMatCat) {
						infoBox.innerHTML = `
				<div class="text-center">
					<img src="http://localhost:4320/img/${ent.moTa.MaMatCat}.jpg" style="max-width: 400px;">
				</div>
				<table class="table table-dark table-striped" style="margin: 0;margin-top: 8px;width: 400px;">
					<tbody>
						<tr>
							<th>Mã mặt cắt</th>
							<td style="text-align: right;">${ent.moTa.MaMatCat}</td>
						</tr>
						<tr>
							<th>Tên mặt cắt</th>
							<td style="text-align: right;">${ent.moTa.TenMatCat}</td>
						</tr>
					</tbody>
				</table>`;
					}

				} else {
					infoBox.classList.add("open");
					var html = ''
					for (const iterator in ent.moTa) {
						if (iterator != 'geom') {
							html += `<tr>
							<th>${iterator}</th>
							<td style="text-align: right;">${ent.moTa[iterator]}</td>
						</tr>`
						}
					}
					infoBox.innerHTML = `
				<table class="table table-dark table-striped" style="margin: 0;margin-top: 8px;width: 400px;">
					<tbody>
						${html}
					</tbody>
				</table>`;
				}
			} else {
				infoBox.classList.remove("open");
			}

		});
		btHoKhoan({ checked: true });
		btMatCat({ checked: true });
		const lapCongBeKyThuat = (element) => {
			var fromDegreesArrayLayerCongBeKyThuat = [];
			element.geometry.coordinates.forEach(e => {
				e.forEach(el => {
					fromDegreesArrayLayerCongBeKyThuat.push(el[0]);
					fromDegreesArrayLayerCongBeKyThuat.push(el[1]);
					// console.log(typeof element.properties.chieusauch, -element.properties.chieusauch / 100);
					if (typeof element.properties.ChieuSauCh == "number") {
						fromDegreesArrayLayerCongBeKyThuat.push(-15 + parseFloat((-element.properties.dosau / 100).toFixed(1)));
					} else {
						fromDegreesArrayLayerCongBeKyThuat.push(-15 + parseFloat((-parseFloat(element.properties.dosau) / 100).toFixed(1)));
					}
				});
			});
			return fromDegreesArrayLayerCongBeKyThuat
		}
		const btCongBeKyThuat = async (e) => {
			if (e.checked) {
				fetch("./uploads/geojson/CongBeKyThuat.geojson")
					.then((res) => res.json())
					.then((data) => {
						data.features.forEach(element => {
							if (element.geometry) {
								// if (element.properties.duongkinho.indexOf('x') == -1) {
								// console.log(element.properties.DuongKinhO, parseFloat(element.properties.DuongKinhO), parseFloat(element.properties.DuongKinhO) ? false : true);
								// console.log(lapDuongOng(element));
								if (element.properties.gid < 100) {
									entities.add({
										id: 'congBeKyThuat' + element.properties.gid,
										parent: parentLayerCongBeKyThuat,
										name: element.properties.gid,
										polylineVolume: {
											positions: Cesium.Cartesian3.fromDegreesArrayHeights(lapCongBeKyThuat(element)),
											shape: computeCircle((600 / 1000)),
											material: Cesium.Color.DARKORANGE,
										},
										moTa: {
											"Phân loại": element.properties.phanloai,
											"Độ sâu": element.properties.dosau,
											"Chiều dài": element.properties.chieudai,
										}
									});
								}
							}
						});
					});
			} else {
				fetch("./uploads/geojson/CongBeKyThuat.geojson")
					.then((res) => res.json())
					.then((data) => {
						data.features.forEach(element => {
							if (element.geometry) {
								if (element.properties.gid < 100) {
									entities.removeById('congBeKyThuat' + element.properties.gid)
								}
							}
						});
					});
			}
		}

		const tileset = viewer.scene.primitives.add(
			new Cesium.Cesium3DTileset({
				url: Cesium.IonResource.fromAssetId(1606278),
			})
		);
		tileset.readyPromise.then(function (tileset) {
			var boundingSphere = tileset.boundingSphere;
			viewer.camera.viewBoundingSphere(boundingSphere, new Cesium.HeadingPitchRange(0, -2.0, 0));
			viewer.camera.lookAtTransform(Cesium.Matrix4.IDENTITY);
			// Position tileset
			var cartographic = Cesium.Cartographic.fromCartesian(boundingSphere.center);
			var surface = Cesium.Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, 0.0);
			var offset = Cesium.Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, -15);
			var translation = Cesium.Cartesian3.subtract(offset, surface, new Cesium.Cartesian3());
			tileset.modelMatrix = Cesium.Matrix4.fromTranslation(translation);
			// console.log(tileset.modelMatrix);
		});

		const tilesset = viewer.scene.primitives.add(
			new Cesium.Cesium3DTileset({
				url: Cesium.IonResource.fromAssetId(1633013),
			})
		);
		tilesset.readyPromise.then(function (tileset) {
			var boundingSphere = tileset.boundingSphere;
			viewer.camera.viewBoundingSphere(boundingSphere, new Cesium.HeadingPitchRange(0, -2.0, 0));
			viewer.camera.lookAtTransform(Cesium.Matrix4.IDENTITY);
			// Position tileset
			var cartographic = Cesium.Cartographic.fromCartesian(boundingSphere.center);
			var surface = Cesium.Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, 0.0);
			var offset = Cesium.Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, -20);
			var translation = Cesium.Cartesian3.subtract(offset, surface, new Cesium.Cartesian3());
			tileset.modelMatrix = Cesium.Matrix4.fromTranslation(translation);
			tileset.style = new Cesium.Cesium3DTileStyle({
				color: {
					conditions: [
						["${Id} === 1", "color('#86d3bb')"],
						["${Id} === 2", "color('#72c4a9')"],
						["${Id} === 3", "color('#58b596')"],
						["${Id} === 4", "color('#44aa89')"],
						["${Id} === 5", "color('#52b092')"],
						["${Id} === 6", "color('#9cb075')"],
						["${Id} === 7", "color('#6d863d')"],
						["${Id} === 8", "color('#627835')"],
						["${Id} === 9", "color('#5b6f30')"],
						["${Id} === 10", "color('#53672b')"],
						["${Id} === 11", "color('#c98b5d')"],
						["${Id} === 12", "color('#ea8c40')"],
						["${Id} === 13", "color('#c87330')"],
						["${Id} === 14", "color('#a7551a')"],
						["${Id} === 15", "color('#a8612e')"],
						["${Id} === 16", "color('#959297')"],
						["${Id} === 17", "color('#4d7cb5')"],
						["${Id} === 18", "color('#3a618f')"],
						["${Id} === 19", "color('#284569')"],
					],
				},
			})
			// console.log(tileset.modelMatrix);
		});

		const btFanceHaNoi = async (e) => {
			if (e.checked) {
				tileset.readyPromise.then(function (tileset) {
					tileset.show = e.checked
				});
			} else {
				tileset.readyPromise.then(function (tileset) {
					tileset.show = e.checked
				});
			}
		}

		const bt3DMC3 = async (e) => {
			if (e.checked) {
				tilesset.readyPromise.then(function (tileset) {
					tileset.show = e.checked
				});
			} else {
				tilesset.readyPromise.then(function (tileset) {
					tileset.show = e.checked

				});
			}
		}

		btFanceHaNoi({ checked: false });
		bt3DMC3({ checked: false });
	</script>
	</div>
</body>

</html>